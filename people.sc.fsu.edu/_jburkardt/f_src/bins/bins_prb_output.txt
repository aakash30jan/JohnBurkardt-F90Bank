30 June 2016  10:17:30.164 PM
 
BINS_PRB
  FORTRAN90 version
  Test the BINS library.
 
TEST01
  R8_TO_BIN_EVEN puts a number into a bin.
  BIN_TO_R8_EVEN returns the bin limits.
 
  The bins are equally spaced between A and B,
  with two extra bins, for things less than A,
  or greater than B.
 
  A =    10.0000    
  B =    20.0000    
  Total number of bins =      7
 
  Using random seed =   1195973441
 
  Generate some random values C and put them in bins.
 
       C      Bin   Bin_Min  Bin_Max
 
     9.94661       1 -0.179769+309   10.0000    
     9.60667       1 -0.179769+309   10.0000    
     11.3526       2   10.0000       12.0000    
     15.3739       4   14.0000       16.0000    
     10.6984       2   10.0000       12.0000    
     15.6705       4   14.0000       16.0000    
     16.0185       5   16.0000       18.0000    
     14.0974       4   14.0000       16.0000    
     22.2102       7   20.0000      0.179769+309
     8.54910       1 -0.179769+309   10.0000    
     11.6929       2   10.0000       12.0000    
     20.2077       7   20.0000      0.179769+309
     13.1264       3   12.0000       14.0000    
     22.8524       7   20.0000      0.179769+309
     17.3853       5   16.0000       18.0000    
     21.8213       7   20.0000      0.179769+309
     12.4984       3   12.0000       14.0000    
     11.7861       2   10.0000       12.0000    
     10.4988       2   10.0000       12.0000    
     20.1382       7   20.0000      0.179769+309
     14.6231       4   14.0000       16.0000    
     22.8003       7   20.0000      0.179769+309
     11.3917       2   10.0000       12.0000    
     11.4742       2   10.0000       12.0000    
     18.5271       6   18.0000       20.0000    
     12.3748       3   12.0000       14.0000    
     20.7576       7   20.0000      0.179769+309
     15.1357       4   14.0000       16.0000    
     12.0028       3   12.0000       14.0000    
     8.52126       1 -0.179769+309   10.0000    
 
TEST02
  BIN_TO_R8_EVEN2 returns the bin limits.
  R8_TO_BIN_EVEN2 puts a number into a bin.
  The bins are equally spaced between A and B.
 
  A =    10.0000    
  B =    20.0000    
  Total number of bins =      5
 
  Using random seed =   1195973441
 
  Generate some random values C and put them in bins.
 
       C      Bin   Bin_Min  Bin_Max
 
     9.94661       1   10.0000       12.0000    
     9.60667       1   10.0000       12.0000    
     11.3526       1   10.0000       12.0000    
     15.3739       3   14.0000       16.0000    
     10.6984       1   10.0000       12.0000    
     15.6705       3   14.0000       16.0000    
     16.0185       4   16.0000       18.0000    
     14.0974       3   14.0000       16.0000    
     22.2102       5   18.0000       20.0000    
     8.54910       1   10.0000       12.0000    
     11.6929       1   10.0000       12.0000    
     20.2077       5   18.0000       20.0000    
     13.1264       2   12.0000       14.0000    
     22.8524       5   18.0000       20.0000    
     17.3853       4   16.0000       18.0000    
     21.8213       5   18.0000       20.0000    
     12.4984       2   12.0000       14.0000    
     11.7861       1   10.0000       12.0000    
     10.4988       1   10.0000       12.0000    
     20.1382       5   18.0000       20.0000    
     14.6231       3   14.0000       16.0000    
     22.8003       5   18.0000       20.0000    
     11.3917       1   10.0000       12.0000    
     11.4742       1   10.0000       12.0000    
     18.5271       5   18.0000       20.0000    
     12.3748       2   12.0000       14.0000    
     20.7576       5   18.0000       20.0000    
     15.1357       3   14.0000       16.0000    
     12.0028       2   12.0000       14.0000    
     8.52126       1   10.0000       12.0000    
 
TEST03
  BIN_TO_R82_EVEN returns the bin limits.
  R82_TO_BIN_EVEN puts a R82 number into a bin.

  The bins are equally spaced between A and B,
  with two extra bins, for things less than A,
  or greater than B.
 
  A(1) =    5.00000    
  B(1) =    15.0000    
  A(2) =    0.00000    
  B(2) =    20.0000    
  Total number of bins =      7
 
  Generate some random values C and put them in bins.
  We list the X and Y components on separate lines.
 
       C      Bin   Bin_Min  Bin_Max
 
 
     21.6750       7   15.0000      0.179769+309
     10.5369       4   8.00000       12.0000    
 
     7.18213       3   7.00000       9.00000    
     8.35704       4   8.00000       12.0000    
 
     8.92691       3   7.00000       9.00000    
     13.5464       5   12.0000       16.0000    
 
     10.0070       4   9.00000       11.0000    
     5.01962       3   4.00000       8.00000    
 
     13.1711       6   13.0000       15.0000    
     4.08382       3   4.00000       8.00000    
 
     16.7201       7   15.0000      0.179769+309
     13.5415       5   12.0000       16.0000    
 
     18.7842       7   15.0000      0.179769+309
     3.61005       2   0.00000       4.00000    
 
     12.7212       5   11.0000       13.0000    
     2.57209       2   0.00000       4.00000    
 
     3.06343       1 -0.179769+309   5.00000    
     5.00748       3   4.00000       8.00000    
 
     15.8406       7   15.0000      0.179769+309
     11.2980       4   8.00000       12.0000    
 
     10.8814       4   9.00000       11.0000    
    0.453208       2   0.00000       4.00000    
 
     16.0975       7   15.0000      0.179769+309
     9.63541       4   8.00000       12.0000    
 
     12.0434       5   11.0000       13.0000    
     12.8485       5   12.0000       16.0000    
 
     10.7563       4   9.00000       11.0000    
     20.6341       7   20.0000      0.179769+309
 
     15.0886       7   15.0000      0.179769+309
     13.9297       5   12.0000       16.0000    
 
     11.5919       5   11.0000       13.0000    
     3.16019       2   0.00000       4.00000    
 
     18.0938       7   15.0000      0.179769+309
    -1.12468       1 -0.179769+309   0.00000    
 
     15.6071       7   15.0000      0.179769+309
     5.81163       3   4.00000       8.00000    
 
     8.26822       3   7.00000       9.00000    
     1.35424       2   0.00000       4.00000    
 
     4.48050       1 -0.179769+309   5.00000    
     1.21241       2   0.00000       4.00000    
 
     11.6999       5   11.0000       13.0000    
     20.9479       7   20.0000      0.179769+309
 
     20.9953       7   15.0000      0.179769+309
     5.31894       3   4.00000       8.00000    
 
     7.75508       3   7.00000       9.00000    
     19.4262       6   16.0000       20.0000    
 
     21.5607       7   15.0000      0.179769+309
     9.88244       4   8.00000       12.0000    
 
     22.2776       7   15.0000      0.179769+309
     19.4295       6   16.0000       20.0000    
 
     10.7733       4   9.00000       11.0000    
     3.98680       2   0.00000       4.00000    
 
     18.7678       7   15.0000      0.179769+309
     8.36139       4   8.00000       12.0000    
 
     12.4728       5   11.0000       13.0000    
     8.72710       4   8.00000       12.0000    
 
     17.1963       7   15.0000      0.179769+309
     18.1298       6   16.0000       20.0000    
 
     15.4446       7   15.0000      0.179769+309
     15.9921       5   12.0000       16.0000    
 
TEST04
  R82VEC_BIN_EVEN constructs evenly spaced bins and
    assigns each element of a R82VEC to a bin.
  R82VEC_BINNED_REORDER can reorder the array
    to correspond to the bin ordering.
  R82VEC_BINNED_SORT_A can sort the individual bins
    after the array has been reordered.
 
  The bins are equally spaced between 
  BIN_MIN and BIN_MAX,
  with two extra bins, for things less than BIN_MIN,
  or greater than BIN_MAX.
 
  Component 1 range:    10.0000       20.0000    
  Component 2 range:    5.00000       10.0000    
 
  Number of bins per row and column =      4
 
 
  The data vector A to be binned:
 
     1   22.0063       6.86637    
     2   16.1762       5.01921    
     3   11.1366       9.79219    
     4   14.7546       3.34252    
     5   12.4452       8.67318    
     6   18.1389       6.05672    
     7   13.2552       5.37070    
     8   12.5780       4.31253    
     9   15.6283       3.66623    
    10   11.9677       4.25703    
    11   18.2901       6.91497    
    12   18.1358       11.9796    
    13   19.8381       11.0979    
    14   11.6587       5.86393    
    15   15.2909       5.13979    
    16   10.9818       11.3841    
    17   8.04757       11.3523    
    18   12.5701       7.64965    
    19   17.6304       11.6749    
    20   16.6726       11.3855    
    21   13.9110       6.49797    
    22   9.59992       5.34266    
    23   17.8231       10.0955    
    24   15.5883       7.05446    
    25   14.7826       7.26276    
    26   17.6838       7.19756    
    27   13.8172       9.38834    
    28   22.7614       10.8769    
    29   17.0665       8.60005    
    30   18.3889       10.0404    
 
  The BIN_START array:
 
  Col       1      2      3      4
  Row
 
    1      -1     22     -1     17
    2       4      7      3     16
    3       9      2     29     12
    4      -1      1     -1     28
 
  The BIN_LAST array:
 
  Col       1      2      3      4
  Row
 
    1      -1     22     -1     17
    2       4      7      3     16
    3       9      2     29     12
    4      -1      1     -1     28
 
  The BIN_NEXT array:
 
       1     0
       2     6
       3     5
       4     8
       5    18
       6    11
       7    14
       8    10
       9     0
      10     0
      11    15
      12    13
      13    19
      14    21
      15    24
      16     0
      17     0
      18    27
      19    20
      20    23
      21    25
      22     0
      23    30
      24    26
      25     0
      26     0
      27     0
      28     0
      29     0
      30     0
 
  Contents of bin number      1     1
 
 
  Contents of bin number      1     2
 
     1  22   9.59992       5.34266    
 
  Contents of bin number      1     3
 
 
  Contents of bin number      1     4
 
     1  17   8.04757       11.3523    
 
  Contents of bin number      2     1
 
     1   4   14.7546       3.34252    
     2   8   12.5780       4.31253    
     3  10   11.9677       4.25703    
 
  Contents of bin number      2     2
 
     1   7   13.2552       5.37070    
     2  14   11.6587       5.86393    
     3  21   13.9110       6.49797    
     4  25   14.7826       7.26276    
 
  Contents of bin number      2     3
 
     1   3   11.1366       9.79219    
     2   5   12.4452       8.67318    
     3  18   12.5701       7.64965    
     4  27   13.8172       9.38834    
 
  Contents of bin number      2     4
 
     1  16   10.9818       11.3841    
 
  Contents of bin number      3     1
 
     1   9   15.6283       3.66623    
 
  Contents of bin number      3     2
 
     1   2   16.1762       5.01921    
     2   6   18.1389       6.05672    
     3  11   18.2901       6.91497    
     4  15   15.2909       5.13979    
     5  24   15.5883       7.05446    
     6  26   17.6838       7.19756    
 
  Contents of bin number      3     3
 
     1  29   17.0665       8.60005    
 
  Contents of bin number      3     4
 
     1  12   18.1358       11.9796    
     2  13   19.8381       11.0979    
     3  19   17.6304       11.6749    
     4  20   16.6726       11.3855    
     5  23   17.8231       10.0955    
     6  30   18.3889       10.0404    
 
  Contents of bin number      4     1
 
 
  Contents of bin number      4     2
 
     1   1   22.0063       6.86637    
 
  Contents of bin number      4     3
 
 
  Contents of bin number      4     4
 
     1  28   22.7614       10.8769    
 
  Call R82VEC_BINNED_REORDER to reorder the array.
 
 
  The data vector, sorted by bins:
 
     1   9.59992       5.34266    
     2   8.04757       11.3523    
     3   14.7546       3.34252    
     4   12.5780       4.31253    
     5   11.9677       4.25703    
     6   13.2552       5.37070    
     7   11.6587       5.86393    
     8   13.9110       6.49797    
     9   14.7826       7.26276    
    10   11.1366       9.79219    
    11   12.4452       8.67318    
    12   12.5701       7.64965    
    13   13.8172       9.38834    
    14   10.9818       11.3841    
    15   15.6283       3.66623    
    16   16.1762       5.01921    
    17   18.1389       6.05672    
    18   18.2901       6.91497    
    19   15.2909       5.13979    
    20   15.5883       7.05446    
    21   17.6838       7.19756    
    22   17.0665       8.60005    
    23   18.1358       11.9796    
    24   19.8381       11.0979    
    25   17.6304       11.6749    
    26   16.6726       11.3855    
    27   17.8231       10.0955    
    28   18.3889       10.0404    
    29   22.0063       6.86637    
    30   22.7614       10.8769    
 
  The BIN_START array:
 
  Col       1      2      3      4
  Row
 
    1      -1      1     -1      2
    2       3      6     10     14
    3      15     16     22     23
    4      -1     29     -1     30
 
  The BIN_LAST array:
 
  Col       1      2      3      4
  Row
 
    1      -1      1     -1      2
    2       5      9     13     14
    3      15     21     22     28
    4      -1     29     -1     30
 
  The BIN_NEXT array:
 
       1     0
       2     0
       3     4
       4     5
       5     0
       6     7
       7     8
       8     9
       9     0
      10    11
      11    12
      12    13
      13     0
      14     0
      15     0
      16    17
      17    18
      18    19
      19    20
      20    21
      21     0
      22     0
      23    24
      24    25
      25    26
      26    27
      27    28
      28     0
      29     0
      30     0
 
  The data vector, with sorted bins:
 
     1   9.59992       5.34266    
     2   8.04757       11.3523    
     3   11.9677       4.25703    
     4   12.5780       4.31253    
     5   14.7546       3.34252    
     6   11.6587       5.86393    
     7   13.2552       5.37070    
     8   13.9110       6.49797    
     9   14.7826       7.26276    
    10   11.1366       9.79219    
    11   12.4452       8.67318    
    12   12.5701       7.64965    
    13   13.8172       9.38834    
    14   10.9818       11.3841    
    15   15.6283       3.66623    
    16   15.2909       5.13979    
    17   15.5883       7.05446    
    18   16.1762       5.01921    
    19   17.6838       7.19756    
    20   18.1389       6.05672    
    21   18.2901       6.91497    
    22   17.0665       8.60005    
    23   16.6726       11.3855    
    24   17.6304       11.6749    
    25   17.8231       10.0955    
    26   18.1358       11.9796    
    27   18.3889       10.0404    
    28   19.8381       11.0979    
    29   22.0063       6.86637    
    30   22.7614       10.8769    
 
TEST05
  R82VEC_PART_QUICK_A reorders an R82VEC
    as part of a quick sort.
  Using initial random number seed =    123456789
 
  Before rearrangment:
 
     1   2.18418       2.40131    
     2   9.56318       2.75467    
     3   8.29509       2.79729    
     4   5.61695       2.00184    
     5   4.15307       2.89750    
     6  0.661187       2.35075    
     7   2.57578       2.09454    
     8   1.09957       2.01362    
     9  0.438290       2.85910    
    10   6.33966       2.84085    
    11  0.617272       2.12310    
    12   4.49539       2.00751    
 
  Rearranged array
  Left index =       4
  Key index =        5
  Right index =      6
 
 
  Left half:
 
     1  0.617272       2.12310    
     2  0.438290       2.85910    
     3   1.09957       2.01362    
     4  0.661187       2.35075    
 
  Key:
 
     1   2.18418       2.40131    
 
  Right half:
 
     1   2.57578       2.09454    
     2   4.15307       2.89750    
     3   5.61695       2.00184    
     4   6.33966       2.84085    
     5   8.29509       2.79729    
     6   4.49539       2.00751    
     7   9.56318       2.75467    
 
TEST05
  R82VEC_PART_QUICK_A reorders an R82VEC
    as part of a quick sort.
  Using initial random number seed =     16132679
 
  Before rearrangment:
 
     1   2.60303       2.18895    
     2   9.12484       2.76149    
     3   1.13664       2.39699    
     4   3.51629       2.18531    
     5   8.22887       2.57437    
     6   2.67132       2.36703    
     7   6.92066       2.61720    
     8   5.61662       2.36153    
     9   8.61216       2.21293    
    10   4.53794       2.71447    
    11   9.11977       2.11771    
    12   5.97917       2.29933    
 
  Rearranged array
  Left index =       1
  Key index =        2
  Right index =      3
 
 
  Left half:
 
     1   1.13664       2.39699    
 
  Key:
 
     1   2.60303       2.18895    
 
  Right half:
 
     1   3.51629       2.18531    
     2   8.22887       2.57437    
     3   2.67132       2.36703    
     4   6.92066       2.61720    
     5   5.61662       2.36153    
     6   8.61216       2.21293    
     7   4.53794       2.71447    
     8   9.11977       2.11771    
     9   5.97917       2.29933    
    10   9.12484       2.76149    
 
TEST07
  R83VEC_PART_QUICK_A reorders an R83VEC
    as part of a quick sort.
  Using initial random number seed =    123456789
 
  Before rearrangment:
 
     1   2.18418       2.40131       1.52061    
     2   9.56318       2.75467       2.82497    
     3   8.29509       2.79729       1.22733    
     4   5.61695       2.00184       1.70326    
     5   4.15307       2.89750       2.64577    
     6  0.661187       2.35075       1.53426    
     7   2.57578       2.09454       2.38413    
     8   1.09957       2.01362       2.12332    
     9  0.438290       2.85910       2.72243    
    10   6.33966       2.84085       1.90759    
    11  0.617272       2.12310       2.82395    
    12   4.49539       2.00751       2.19583    
 
  Rearranged array
  Left index =       4
  Key index =        5
  Right index =      6
 
 
  Left half:
 
     1  0.617272       2.12310       2.82395    
     2  0.438290       2.85910       2.72243    
     3   1.09957       2.01362       2.12332    
     4  0.661187       2.35075       1.53426    
 
  Key:
 
     1   2.18418       2.40131       1.52061    
 
  Right half:
 
     1   2.57578       2.09454       2.38413    
     2   4.15307       2.89750       2.64577    
     3   5.61695       2.00184       1.70326    
     4   6.33966       2.84085       1.90759    
     5   8.29509       2.79729       1.22733    
     6   4.49539       2.00751       2.19583    
     7   9.56318       2.75467       2.82497    
 
TEST08
  R83VEC_SORT_QUICK_A sorts an R83VEC
    using quick sort.
  Using initial random number seed =    123456789
 
  Before rearrangment:
 
     1   2.18418       2.40131       1.52061    
     2   9.56318       2.75467       2.82497    
     3   4.15307       2.79729       1.22733    
     4   4.49539       2.00751       1.70326    
     5   4.15307       2.89750       2.64577    
     6  0.661187       2.35075       1.53426    
     7  0.617272       2.12310       2.82395    
     8   1.09957       2.01362       2.12332    
     9  0.438290       2.85910       2.72243    
    10   6.33966       2.84085       1.90759    
    11  0.617272       2.12310       2.82395    
    12   4.49539       2.00751       2.19583    
 
  Sorted array:
 
     1  0.438290       2.85910       2.72243    
     2  0.617272       2.12310       2.82395    
     3  0.617272       2.12310       2.82395    
     4  0.661187       2.35075       1.53426    
     5   1.09957       2.01362       2.12332    
     6   2.18418       2.40131       1.52061    
     7   4.15307       2.79729       1.22733    
     8   4.15307       2.89750       2.64577    
     9   4.49539       2.00751       1.70326    
    10   4.49539       2.00751       2.19583    
    11   6.33966       2.84085       1.90759    
    12   9.56318       2.75467       2.82497    
 
TEST09
  R8VEC_BIN computes bins for an R8VEC.
 
  The vector to be binned:
 
       1   5.0419500    
       2  0.53352663E-01
       3   6.6982124    
       4   3.8556571    
       5   4.0282247    
       6   5.3727936    
       7   9.5417792    
       8   7.6834974    
       9   1.5409093    
      10   9.0622587    
      11   8.3820246    
      12   2.6881233    
      13  -1.7117350    
      14   6.8696554    
      15 -0.70155152    
      16   7.0235543    
      17  -1.1233344    
      18   3.1195775    
      19   8.7390832    
      20   10.771407    
      21   4.0339531    
      22   10.649869    
      23   2.3479215    
      24  0.51635553    
      25   1.3873323    
 
  Number of bins is      5
  Bin minimum is    0.00000    
  Bin maximum is    10.0000    
 
  Lower Limit    Upper Limit    Count
 
    0.0000  0.0000   3
    0.0000  2.0000   4
    2.0000  4.0000   4
    4.0000  6.0000   4
    6.0000  8.0000   4
    8.0000 10.0000   4
   10.0000           2
 
TEST10
  R8VEC_BIN_EVEN constructs evenly spaced bins and
    assigns each element of a DVEC to a bin.
  R8VEC_BINNED_REORDER can reorder the array
    to correspond to the bin ordering.
  R8VEC_BINNED_SORT_A can sort the array
    once it has been reordered.
 
  The bins are equally spaced between 
  BIN_MIN and BIN_MAX,
  with two extra bins, for things less than BIN_MIN,
  or greater than BIN_MAX.
 
  BIN_MIN =    10.0000    
  BIN_MAX =    20.0000    
  Total number of bins =      7
 
 
  The data vector A to be binned:
 
       1   16.125327    
       2   10.369253    
       3   18.036399    
       4   14.756527    
       5   14.955644    
       6   16.507070    
       7   21.317438    
       8   19.173266    
       9   12.085665    
      10   20.764145    
      11   19.979259    
      12   13.409373    
      13   8.3326134    
      14   18.234218    
      15   9.4982098    
      16   18.411793    
      17   9.0115373    
      18   13.907205    
      19   20.391250    
      20   22.736239    
      21   14.962254    
      22   22.596003    
      23   13.016832    
      24   10.903487    
      25   11.908460    
      26   12.493912    
      27   12.177450    
      28   18.395175    
      29   14.713815    
      30   17.088498    
 
  The BIN_START array:
 
       1    13
       2     2
       3     9
       4     4
       5     1
       6     3
       7     7
 
  The BIN_LAST array:
 
       1    17
       2    25
       3    27
       4    29
       5    30
       6    28
       7    22
 
  The BIN_NEXT array:
 
       1     6
       2    24
       3     8
       4     5
       5    21
       6    30
       7    10
       8    11
       9    12
      10    19
      11    14
      12    18
      13    15
      14    16
      15    17
      16    28
      17     0
      18    23
      19    20
      20    22
      21    29
      22     0
      23    26
      24    25
      25     0
      26    27
      27     0
      28     0
      29     0
      30     0
 
  Contents of bin number      1
 
     1  13   8.33261    
     2  15   9.49821    
     3  17   9.01154    
 
  Contents of bin number      2
 
     1   2   10.3693    
     2  24   10.9035    
     3  25   11.9085    
 
  Contents of bin number      3
 
     1   9   12.0857    
     2  12   13.4094    
     3  18   13.9072    
     4  23   13.0168    
     5  26   12.4939    
     6  27   12.1774    
 
  Contents of bin number      4
 
     1   4   14.7565    
     2   5   14.9556    
     3  21   14.9623    
     4  29   14.7138    
 
  Contents of bin number      5
 
     1   1   16.1253    
     2   6   16.5071    
     3  30   17.0885    
 
  Contents of bin number      6
 
     1   3   18.0364    
     2   8   19.1733    
     3  11   19.9793    
     4  14   18.2342    
     5  16   18.4118    
     6  28   18.3952    
 
  Contents of bin number      7
 
     1   7   21.3174    
     2  10   20.7641    
     3  19   20.3912    
     4  20   22.7362    
     5  22   22.5960    
 
  Call R8VEC_BINNED_REORDER to reorder the array.
 
 
  The data vector A:
 
       1   8.3326134    
       2   9.4982098    
       3   9.0115373    
       4   10.369253    
       5   10.903487    
       6   11.908460    
       7   12.085665    
       8   13.409373    
       9   13.907205    
      10   13.016832    
      11   12.493912    
      12   12.177450    
      13   14.756527    
      14   14.955644    
      15   14.962254    
      16   14.713815    
      17   16.125327    
      18   16.507070    
      19   17.088498    
      20   18.036399    
      21   19.173266    
      22   19.979259    
      23   18.234218    
      24   18.411793    
      25   18.395175    
      26   21.317438    
      27   20.764145    
      28   20.391250    
      29   22.736239    
      30   22.596003    
 
  The BIN_START array:
 
       1     1
       2     4
       3     7
       4    13
       5    17
       6    20
       7    26
 
  The BIN_LAST array:
 
       1     3
       2     6
       3    12
       4    16
       5    19
       6    25
       7    30
 
  The BIN_NEXT array:
 
       1     2
       2     3
       3     0
       4     5
       5     6
       6     0
       7     8
       8     9
       9    10
      10    11
      11    12
      12     0
      13    14
      14    15
      15    16
      16     0
      17    18
      18    19
      19     0
      20    21
      21    22
      22    23
      23    24
      24    25
      25     0
      26    27
      27    28
      28    29
      29    30
      30     0
 
  The sorted data vector A:
 
       1   8.3326134    
       2   9.0115373    
       3   9.4982098    
       4   10.369253    
       5   10.903487    
       6   11.908460    
       7   12.085665    
       8   12.177450    
       9   12.493912    
      10   13.016832    
      11   13.409373    
      12   13.907205    
      13   14.713815    
      14   14.756527    
      15   14.955644    
      16   14.962254    
      17   16.125327    
      18   16.507070    
      19   17.088498    
      20   18.036399    
      21   18.234218    
      22   18.395175    
      23   18.411793    
      24   19.173266    
      25   19.979259    
      26   20.391250    
      27   20.764145    
      28   21.317438    
      29   22.596003    
      30   22.736239    
 
TEST11
  Given a point in 2D, we want to find its nearest
  neighbor among points in a set.
 
  POINTS_NEAREST_POINT_NAIVE_2D uses a naive algorithm.
  POINTS_NEAREST_POINT_BINS_2D and
  POINTS_NEAREST_POINT_BINS_2D_2 use bins, but require
    the same number in each direction.
  POINTS_NEAREST_POINT_BINS_2D_3 uses bins, and can use
    a different number in each direction.
 
  The number of points in the pointset is   1000
 
  POINTS_NEAREST_POINT_BINS_2D and
  POINTS_NEAREST_POINT_BINS_2D_2 use     10
    bins in each direction.
  POINTS_NEAREST_POINT_BINS_2D_3 uses     20     5
    bins in each direction.
 
  The X coordinate range:    0.00000       20.0000    
  The Y coordinate range:    0.00000       5.00000    
 
  Test point X range:        0.00000       20.0000    
  Test point Y range:        0.00000       5.00000    
 
    Test point           Neighbor point      Distance
--------------------  --------------------  ----------
 
 
     14.9508    4.3521     14.9991    4.2166      0.1438  1000
     14.9508    4.3521     14.9991    4.2166      0.1438    13
     14.9508    4.3521     14.9991    4.2166      0.1438    13
     14.9508    4.3521     15.8243    2.2894      0.1438    59
 
      2.4729    0.5079      2.5180    0.6927      0.1902  1000
      2.4729    0.5079      2.5180    0.6927      0.1902    92
      2.4729    0.5079      2.5180    0.6927      0.1902    92
      2.4729    0.5079      2.6648    0.2484      0.1902    14
 
      8.1566    2.1458      8.2568    2.0666      0.1277  1000
      8.1566    2.1458      8.2568    2.0666      0.1277     9
      8.1566    2.1458      8.2568    2.0666      0.1277     9
      8.1566    2.1458      9.6967    0.9044      0.1277    10
 
     18.7061    3.4669     18.8883    3.4484      0.1832  1000
     18.7061    3.4669     18.8883    3.4484      0.1832    46
     18.7061    3.4669     18.8883    3.4484      0.1832    46
     18.7061    3.4669     19.1350    1.9987      0.1832     6
 
     15.9852    0.6162     15.6757    0.5363      0.3196  1000
     15.9852    0.6162     15.6757    0.5363      0.3196    99
     15.9852    0.6162     15.6757    0.5363      0.3196    99
     15.9852    0.6162     15.4120    2.9001      0.3196    55
 
      4.7382    3.6001      4.9253    3.6185      0.1880  1000
      4.7382    3.6001      4.9253    3.6185      0.1880    93
      4.7382    3.6001      4.9253    3.6185      0.1880    93
      4.7382    3.6001      5.8095    1.7666      0.1880     8
 
      7.5550    4.0715      7.6969    4.2623      0.2378  1000
      7.5550    4.0715      7.6969    4.2623      0.2378    91
      7.5550    4.0715      7.6969    4.2623      0.2378    91
      7.5550    4.0715      6.6506    4.7919      0.2378    60
 
     16.5715    4.3991     16.3617    4.5427      0.2542  1000
     16.5715    4.3991     16.3617    4.5427      0.2542    87
     16.5715    4.3991     16.3617    4.5427      0.2542    87
     16.5715    4.3991     16.6025    2.4562      0.2542     6
 
      5.1075    0.2936      5.1662    0.3285      0.0683  1000
      5.1075    0.2936      5.1662    0.3285      0.0683     9
      5.1075    0.2936      5.1662    0.3285      0.0683     9
      5.1075    0.2936      5.8754    2.4802      0.0683     9
 
     17.9588    3.3774     18.1511    3.6014      0.2953  1000
     17.9588    3.3774     18.1511    3.6014      0.2953    69
     17.9588    3.3774     18.1511    3.6014      0.2953    69
     17.9588    3.3774     18.6141    1.9460      0.2953    78
 
TEST12
  Given a point set in 2D, and a set of test points,
  for each testpoint, find the nearest neighbor in
  the point set.
 
  POINTS_NEAREST_POINTS_NAIVE_2D uses a naive algorithm.
  POINTS_NEAREST_POINTS_BINS_2D uses equal bins.
  POINTS_NEAREST_POINTS_BINS_2D_2 uses equal bins.
  POINTS_NEAREST_POINTS_BINS_2D_3 uses variable bins.
 
  The number of points in the pointset is   1000
  The number of points in the test set is    100
 
  POINTS_NEAREST_POINTS_BINS_2D and 
  POINTS_NEAREST_POINTS_BINS_2D_2 use     10
    bins in each direction.
  POINTS_NEAREST_POINTS_BINS_2D_3 uses     10    10
    bins in each direction.
 
  The X coordinate range:    0.00000       10.0000    
  The Y coordinate range:    0.00000       10.0000    
 
 
  Print results for up to first 10 points...
 
    Test point		      Distance
                       Naive     Bins     Bins2     Bins3
--------------------  ------------------------------------
 
 
      7.4754    4.8468        0.2041    0.2041    0.2041    0.2041
      8.7042    0.3605        0.1910    0.1910    0.1910    0.1910
      1.2365    9.2229        0.0853    0.0853    0.0853    0.0853
      1.0159    9.2763        0.1436    0.1436    0.1436    0.1436
      4.0783    7.1919        0.2873    0.2873    0.2873    0.2873
      4.2916    4.4874        0.0474    0.0474    0.0474    0.0474
      9.3531    0.4123        0.0239    0.0239    0.0239    0.0239
      6.9339    9.8958        0.2983    0.2983    0.2983    0.2983
      7.9926    9.3159        0.2977    0.2977    0.2977    0.2977
      1.2324    1.6629        0.1478    0.1478    0.1478    0.1478
 
  Naive and bin1 codes computed the same results.
 
  Naive and bin2 codes computed the same results.
 
  Naive and bin3 codes computed the same results.
 
  Naive code time =   0.100000E-02
  Bin code time =	   0.00000    
  Bin2 code time =      0.00000    
  Bin3 code time =      0.00000    
 
TEST13
  Given a point set in 2D, and a set of test points,
  for each testpoint, find the nearest neighbor in
  the point set.
 
  In this test, the region is RECTANGULAR.
  The BINS and BINS2 codes will end up using rectangular bins;
  We will set the BINS3 code to use the same number of bins,
  but they will be square.  This should mean that BINS3
  finds a match faster.
 
  POINTS_NEAREST_POINTS_NAIVE_2D uses a naive algorithm.
  POINTS_NEAREST_POINTS_BINS_2D uses bins.
  POINTS_NEAREST_POINTS_BINS_2D_2 uses bins.
  POINTS_NEAREST_POINTS_BINS_2D_3 uses bins.
 
  The number of points in the pointset is   1000
  The number of bins used in each direction is     10
  The number of points in the test set is    100
 
  The X coordinate range:    0.00000       4.00000    
  The Y coordinate range:    0.00000       25.0000    
 
 
  Print results for up to first 10 points...
 
    Test point		      Distance
                       Naive     Bins     Bins2     Bins3
--------------------  ------------------------------------
 
 
      2.9902   12.1170        0.1954    0.1954    0.1954    0.1954
      3.4817    0.9013        0.0764    0.0764    0.0764    0.0764
      0.4946   23.0572        0.0395    0.0395    0.0395    0.0395
      0.4064   23.1908        0.1855    0.1855    0.1855    0.1855
      1.6313   17.9798        0.1164    0.1164    0.1164    0.1164
      1.7167   11.2186        0.0197    0.0197    0.0197    0.0197
      3.7412    1.0308        0.0586    0.0586    0.0586    0.0586
      2.7736   24.7396        0.1899    0.1899    0.1899    0.1899
      3.1970   23.2897        0.2805    0.2805    0.2805    0.2805
      0.4929    4.1572        0.2869    0.2869    0.2869    0.2869
 
  Naive and bin1 codes computed the same results.
 
  Naive and bin2 codes computed the same results.
 
  Naive and bin3 codes computed the same results.
 
  Naive code time =   0.100000E-02
  Bin code time =      0.00000    
  Bin2 code time =      0.00000    
  Bin3 code time =      0.00000    
 
TEST14
  Given a point set in 3D, and a set of test points,
  for each testpoint, find the nearest neighbor in
  the point set.
 
  POINTS_NEAREST_POINTS_NAIVE_3D uses a naive algorithm.
  POINTS_NEAREST_POINTS_BINS_3D_2 uses bins.
 
  The number of points in the pointset is   4096
  The number of bins used in each direction is     32
  The number of points in the test set is   1000
 
  The X coordinate range:    0.00000       10.0000    
  The Y coordinate range:    0.00000       10.0000    
  The Z coordinate range:    0.00000       10.0000    
 
 
  Print up to the first 10 points.
 
    Test point                       Distance        Comparisons
                                 Naive     Bins     Naive Bins
-----------------------------  --------------------  ----------
 
 
    6.0435    8.2578    8.9217    0.3736    0.3736    4096     7
    3.3103    9.4387    7.8419    0.2349    0.2349    4096     7
    6.6906    6.1998    9.4486    0.3432    0.3432    4096     7
    8.1085    0.6709    3.1854    0.4333    0.4333    4096    20
    9.3259    5.0737    6.4339    0.2743    0.2743    4096     3
    9.8900    4.4102    4.2415    0.3369    0.3369    4096     4
    0.8175    3.0704    7.4605    0.1155    0.1155    4096     4
    9.4071    3.9908    8.6950    0.1957    0.1957    4096     5
    4.8975    2.8356    6.3092    0.1013    0.1013    4096     8
    2.7082    7.8060    9.4692    0.2601    0.2601    4096     6
 
  Naive and bin codes computed the same results.
 
  Naive code time =   0.410000E-01
  Bin code time =     0.300000E-02
 
TEST15
  Given a point set XC, and a single point XD,
  find the nearest point in XC to XD.
 
  POINTS_NEAREST_POINT_NAIVE_2D uses a naive method.
  POINTS_NEAREST_POINT_DEL_2D uses the Delaunay
  triangulation
  TRIANGULATION_PRINT prints a triangulation.
 
TRIANGULATION_PRINT
  Information defining a triangulation.
 
  The number of points is     13
 
  Point coordinates
 
  Row         1             2       
  Col
    1    0.00000       0.00000    
    2    2.00000       2.00000    
    3   -1.00000       3.00000    
    4   -2.00000       2.00000    
    5    8.00000       2.00000    
    6    9.00000       5.00000    
    7    7.00000       4.00000    
    8    5.00000       6.00000    
    9    6.00000       7.00000    
   10    8.00000       8.00000    
   11    11.0000       7.00000    
   12    10.0000       4.00000    
   13    6.00000       4.00000    
 
  The number of triangles is     16
 
  Sets of three points are used as vertices of
  the triangles.  For each triangle, the points
  are listed in counterclockwise order.
 
  Triangle nodes:
 
  Row       1      2      3
  Col
 
    1       3      4      1
    2       3      1      2
    3       3      2      8
 
  On each side of a given triangle, there is either
  another triangle, or a piece of the convex hull.
  For each triangle, we list the indices of the three
  neighbors, or (if negative) the codes of the
  segments of the convex hull.
 
  Triangle neighbors
 
  Row       1      2      3
  Col
 
    1      -4    -13      2
    2       1      4      3
    3       2      5      7
 
  The number of boundary points is      8
 
  The segments that make up the convex hull can be
  determined from the negative entries of the triangle
  neighbor list.
 
  # Tri Side  N1  N2
 
   1   1   2   4   1
   2   4   2   1   5
   3  14   2   5  12
   4   1   1   3   4
   5   7   3   9   3
   6  15   3  12  11
   7  16   3  11  10
   8  13   1  10   9
 DEBUG: About to call triangulation_sample.
 DEBUG: Returned from triangulation_sample.
 
    X        Y     Distance  Index
 
 
  XD        -0.9224  2.9930
  Naive     -1.0000  3.0000  0.0779     3
  Delaunay  -1.0000  3.0000  0.0779     3
 
  XD         6.5701  3.2889
  Naive      7.0000  4.0000  0.8310     7
  Delaunay   7.0000  4.0000  0.8310     7
 
  XD         5.7761  1.9414
  Naive      6.0000  4.0000  2.0707    13
  Delaunay   6.0000  4.0000  2.0707    13
 
  XD         6.4137  4.7453
  Naive      6.0000  4.0000  0.8525    13
  Delaunay   6.0000  4.0000  0.8525    13
 
  XD         4.7126  5.5281
  Naive      5.0000  6.0000  0.5525     8
  Delaunay   5.0000  6.0000  0.5525     8
 
  XD        -0.9843  2.8790
  Naive     -1.0000  3.0000  0.1220     3
  Delaunay  -1.0000  3.0000  0.1220     3
 
  XD         0.1322  0.5990
  Naive      0.0000  0.0000  0.6134     1
  Delaunay   0.0000  0.0000  0.6134     1
 
  XD         8.6345  6.0623
  Naive      9.0000  5.0000  1.1235     6
  Delaunay   9.0000  5.0000  1.1235     6
 
  XD         2.2279  1.9898
  Naive      2.0000  2.0000  0.2281     2
  Delaunay   2.0000  2.0000  0.2281     2
 
  XD         2.3587  1.9504
  Naive      2.0000  2.0000  0.3622     2
  Delaunay   2.0000  2.0000  0.3622     2
 
TEST16
  POINTS_NEAREST_POINT_NAIVE_ND computes the nearest point
    in a set of points, to a given point, in ND.
 
  The spatial dimension NDIM is      2
  The number of points N is     12
 
  The set of points:
 
  Col         1             2             3             4             5       
  Row
 
    1    7.00000       4.00000       5.00000       2.00000       6.00000    
    2    3.00000       7.00000       13.0000       7.00000       9.00000    
 
  Col         6             7             8             9            10       
  Row
 
    1    12.0000       3.00000       6.00000       3.00000       8.00000    
    2    8.00000       4.00000       6.00000       10.0000       7.00000    
 
  Col        11            12       
  Row
 
    1    5.00000       10.0000    
    2    13.0000       6.00000    
 
  Test point is 
     7.00000       1.00000    
  Nearest point is 
     7.00000       3.00000    
  Distance is    2.00000    
 
  Test point is 
     4.00000       7.00000    
  Nearest point is 
     4.00000       7.00000    
  Distance is    0.00000    
 
  Test point is 
     8.00000       11.0000    
  Nearest point is 
     6.00000       9.00000    
  Distance is    2.82843    
 
BINS_PRB
  Normal end of execution.
 
30 June 2016  10:17:30.236 PM
