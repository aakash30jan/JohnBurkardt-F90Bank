16 October 2011  10:54:38.094 AM
 
SGMGA_VCN_PRB:
  FORTRAN90 version
  Test the SGMGA_VCN and SGMGA_VCN_ORDERED functions.
 
SGMGA_VCN_TESTS
  calls SGMGA_VCN_TEST.
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we just compare the results.
 
  IMPORTANCE:
   1.00000       1.00000    
  LEVEL_WEIGHT:
   1.00000       1.00000    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN    -2.00000       0   0
     1     0.00000       0   0
   MAX     0.00000       0   0
 
  SGMGA_VCN:
     I       Q           X
   MIN    -2.00000       0   0
     1     0.00000       0   0
   MAX     0.00000       0   0
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we just compare the results.
 
  IMPORTANCE:
   1.00000       1.00000    
  LEVEL_WEIGHT:
   1.00000       1.00000    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN    -1.00000       0   0
     1     0.00000       0   0
     2     1.00000       1   0
     3     1.00000       0   1
   MAX     1.00000       1   1
 
  SGMGA_VCN:
     I       Q           X
   MIN    -1.00000       0   0
     1     0.00000       0   0
     2     1.00000       1   0
     3     1.00000       0   1
   MAX     1.00000       1   1
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we just compare the results.
 
  IMPORTANCE:
   1.00000       1.00000    
  LEVEL_WEIGHT:
   1.00000       1.00000    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN     0.00000       0   0
     1     1.00000       1   0
     2     2.00000       2   0
     3     1.00000       0   1
     4     2.00000       1   1
     5     2.00000       0   2
   MAX     2.00000       2   2
 
  SGMGA_VCN:
     I       Q           X
   MIN     0.00000       0   0
     1     1.00000       1   0
     2     2.00000       2   0
     3     1.00000       0   1
     4     2.00000       1   1
     5     2.00000       0   2
   MAX     2.00000       2   2
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we just compare the results.
 
  IMPORTANCE:
   1.00000       1.00000    
  LEVEL_WEIGHT:
   1.00000       1.00000    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN     1.00000       0   0
     1     2.00000       2   0
     2     3.00000       3   0
     3     2.00000       1   1
     4     3.00000       2   1
     5     2.00000       0   2
     6     3.00000       1   2
     7     3.00000       0   3
   MAX     3.00000       3   3
 
  SGMGA_VCN:
     I       Q           X
   MIN     1.00000       0   0
     1     2.00000       2   0
     2     3.00000       3   0
     3     2.00000       1   1
     4     3.00000       2   1
     5     2.00000       0   2
     6     3.00000       1   2
     7     3.00000       0   3
   MAX     3.00000       3   3
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we just compare the results.
 
  IMPORTANCE:
   1.00000       1.00000    
  LEVEL_WEIGHT:
   1.00000       1.00000    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN     2.00000       0   0
     1     3.00000       3   0
     2     4.00000       4   0
     3     3.00000       2   1
     4     4.00000       3   1
     5     3.00000       1   2
     6     4.00000       2   2
     7     3.00000       0   3
     8     4.00000       1   3
     9     4.00000       0   4
   MAX     4.00000       4   4
 
  SGMGA_VCN:
     I       Q           X
   MIN     2.00000       0   0
     1     3.00000       3   0
     2     4.00000       4   0
     3     3.00000       2   1
     4     4.00000       3   1
     5     3.00000       1   2
     6     4.00000       2   2
     7     3.00000       0   3
     8     4.00000       1   3
     9     4.00000       0   4
   MAX     4.00000       4   4
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we just compare the results.
 
  IMPORTANCE:
   1.00000       1.00000       1.00000    
  LEVEL_WEIGHT:
   1.00000       1.00000       1.00000    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN    -3.00000       0   0   0
     1     0.00000       0   0   0
   MAX     0.00000       0   0   0
 
  SGMGA_VCN:
     I       Q           X
   MIN    -3.00000       0   0   0
     1     0.00000       0   0   0
   MAX     0.00000       0   0   0
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we just compare the results.
 
  IMPORTANCE:
   1.00000       1.00000       1.00000    
  LEVEL_WEIGHT:
   1.00000       1.00000       1.00000    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN    -2.00000       0   0   0
     1     0.00000       0   0   0
     2     1.00000       1   0   0
     3     1.00000       0   1   0
     4     1.00000       0   0   1
   MAX     1.00000       1   1   1
 
  SGMGA_VCN:
     I       Q           X
   MIN    -2.00000       0   0   0
     1     0.00000       0   0   0
     2     1.00000       1   0   0
     3     1.00000       0   1   0
     4     1.00000       0   0   1
   MAX     1.00000       1   1   1
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we just compare the results.
 
  IMPORTANCE:
   1.00000       1.00000       1.00000    
  LEVEL_WEIGHT:
   1.00000       1.00000       1.00000    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN    -1.00000       0   0   0
     1     0.00000       0   0   0
     2     1.00000       1   0   0
     3     2.00000       2   0   0
     4     1.00000       0   1   0
     5     2.00000       1   1   0
     6     2.00000       0   2   0
     7     1.00000       0   0   1
     8     2.00000       1   0   1
     9     2.00000       0   1   1
    10     2.00000       0   0   2
   MAX     2.00000       2   2   2
 
  SGMGA_VCN:
     I       Q           X
   MIN    -1.00000       0   0   0
     1     0.00000       0   0   0
     2     1.00000       1   0   0
     3     2.00000       2   0   0
     4     1.00000       0   1   0
     5     2.00000       1   1   0
     6     2.00000       0   2   0
     7     1.00000       0   0   1
     8     2.00000       1   0   1
     9     2.00000       0   1   1
    10     2.00000       0   0   2
   MAX     2.00000       2   2   2
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we just compare the results.
 
  IMPORTANCE:
   1.00000       1.00000       1.00000    
  LEVEL_WEIGHT:
   1.00000       1.00000       1.00000    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN     0.00000       0   0   0
     1     1.00000       1   0   0
     2     2.00000       2   0   0
     3     3.00000       3   0   0
     4     1.00000       0   1   0
     5     2.00000       1   1   0
     6     3.00000       2   1   0
     7     2.00000       0   2   0
     8     3.00000       1   2   0
     9     3.00000       0   3   0
    10     1.00000       0   0   1
    11     2.00000       1   0   1
    12     3.00000       2   0   1
    13     2.00000       0   1   1
    14     3.00000       1   1   1
    15     3.00000       0   2   1
    16     2.00000       0   0   2
    17     3.00000       1   0   2
    18     3.00000       0   1   2
    19     3.00000       0   0   3
   MAX     3.00000       3   3   3
 
  SGMGA_VCN:
     I       Q           X
   MIN     0.00000       0   0   0
     1     1.00000       1   0   0
     2     2.00000       2   0   0
     3     3.00000       3   0   0
     4     1.00000       0   1   0
     5     2.00000       1   1   0
     6     3.00000       2   1   0
     7     2.00000       0   2   0
     8     3.00000       1   2   0
     9     3.00000       0   3   0
    10     1.00000       0   0   1
    11     2.00000       1   0   1
    12     3.00000       2   0   1
    13     2.00000       0   1   1
    14     3.00000       1   1   1
    15     3.00000       0   2   1
    16     2.00000       0   0   2
    17     3.00000       1   0   2
    18     3.00000       0   1   2
    19     3.00000       0   0   3
   MAX     3.00000       3   3   3
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we just compare the results.
 
  IMPORTANCE:
   1.00000       1.00000       1.00000    
  LEVEL_WEIGHT:
   1.00000       1.00000       1.00000    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN     1.00000       0   0   0
     1     2.00000       2   0   0
     2     3.00000       3   0   0
     3     4.00000       4   0   0
     4     2.00000       1   1   0
     5     3.00000       2   1   0
     6     4.00000       3   1   0
     7     2.00000       0   2   0
     8     3.00000       1   2   0
     9     4.00000       2   2   0
    10     3.00000       0   3   0
    11     4.00000       1   3   0
    12     4.00000       0   4   0
    13     2.00000       1   0   1
    14     3.00000       2   0   1
    15     4.00000       3   0   1
    16     2.00000       0   1   1
    17     3.00000       1   1   1
    18     4.00000       2   1   1
    19     3.00000       0   2   1
    20     4.00000       1   2   1
    21     4.00000       0   3   1
    22     2.00000       0   0   2
    23     3.00000       1   0   2
    24     4.00000       2   0   2
    25     3.00000       0   1   2
    26     4.00000       1   1   2
    27     4.00000       0   2   2
    28     3.00000       0   0   3
    29     4.00000       1   0   3
    30     4.00000       0   1   3
    31     4.00000       0   0   4
   MAX     4.00000       4   4   4
 
  SGMGA_VCN:
     I       Q           X
   MIN     1.00000       0   0   0
     1     2.00000       2   0   0
     2     3.00000       3   0   0
     3     4.00000       4   0   0
     4     2.00000       1   1   0
     5     3.00000       2   1   0
     6     4.00000       3   1   0
     7     2.00000       0   2   0
     8     3.00000       1   2   0
     9     4.00000       2   2   0
    10     3.00000       0   3   0
    11     4.00000       1   3   0
    12     4.00000       0   4   0
    13     2.00000       1   0   1
    14     3.00000       2   0   1
    15     4.00000       3   0   1
    16     2.00000       0   1   1
    17     3.00000       1   1   1
    18     4.00000       2   1   1
    19     3.00000       0   2   1
    20     4.00000       1   2   1
    21     4.00000       0   3   1
    22     2.00000       0   0   2
    23     3.00000       1   0   2
    24     4.00000       2   0   2
    25     3.00000       0   1   2
    26     4.00000       1   1   2
    27     4.00000       0   2   2
    28     3.00000       0   0   3
    29     4.00000       1   0   3
    30     4.00000       0   1   3
    31     4.00000       0   0   4
   MAX     4.00000       4   4   4
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we just compare the results.
 
  IMPORTANCE:
   1.00000       1.00000       1.00000       1.00000    
  LEVEL_WEIGHT:
   1.00000       1.00000       1.00000       1.00000    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN    -2.00000       0   0   0   0
     1     0.00000       0   0   0   0
     2     1.00000       1   0   0   0
     3     2.00000       2   0   0   0
     4     1.00000       0   1   0   0
     5     2.00000       1   1   0   0
     6     2.00000       0   2   0   0
     7     1.00000       0   0   1   0
     8     2.00000       1   0   1   0
     9     2.00000       0   1   1   0
    10     2.00000       0   0   2   0
    11     1.00000       0   0   0   1
    12     2.00000       1   0   0   1
    13     2.00000       0   1   0   1
    14     2.00000       0   0   1   1
    15     2.00000       0   0   0   2
   MAX     2.00000       2   2   2   2
 
  SGMGA_VCN:
     I       Q           X
   MIN    -2.00000       0   0   0   0
     1     0.00000       0   0   0   0
     2     1.00000       1   0   0   0
     3     2.00000       2   0   0   0
     4     1.00000       0   1   0   0
     5     2.00000       1   1   0   0
     6     2.00000       0   2   0   0
     7     1.00000       0   0   1   0
     8     2.00000       1   0   1   0
     9     2.00000       0   1   1   0
    10     2.00000       0   0   2   0
    11     1.00000       0   0   0   1
    12     2.00000       1   0   0   1
    13     2.00000       0   1   0   1
    14     2.00000       0   0   1   1
    15     2.00000       0   0   0   2
   MAX     2.00000       2   2   2   2
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we just compare the results.
 
  IMPORTANCE:
   1.00000       1.00000       1.00000       1.00000    
  LEVEL_WEIGHT:
   1.00000       1.00000       1.00000       1.00000    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN    -1.00000       0   0   0   0
     1     0.00000       0   0   0   0
     2     1.00000       1   0   0   0
     3     2.00000       2   0   0   0
     4     3.00000       3   0   0   0
     5     1.00000       0   1   0   0
     6     2.00000       1   1   0   0
     7     3.00000       2   1   0   0
     8     2.00000       0   2   0   0
     9     3.00000       1   2   0   0
    10     3.00000       0   3   0   0
    11     1.00000       0   0   1   0
    12     2.00000       1   0   1   0
    13     3.00000       2   0   1   0
    14     2.00000       0   1   1   0
    15     3.00000       1   1   1   0
    16     3.00000       0   2   1   0
    17     2.00000       0   0   2   0
    18     3.00000       1   0   2   0
    19     3.00000       0   1   2   0
    20     3.00000       0   0   3   0
    21     1.00000       0   0   0   1
    22     2.00000       1   0   0   1
    23     3.00000       2   0   0   1
    24     2.00000       0   1   0   1
    25     3.00000       1   1   0   1
    26     3.00000       0   2   0   1
    27     2.00000       0   0   1   1
    28     3.00000       1   0   1   1
    29     3.00000       0   1   1   1
    30     3.00000       0   0   2   1
    31     2.00000       0   0   0   2
    32     3.00000       1   0   0   2
    33     3.00000       0   1   0   2
    34     3.00000       0   0   1   2
    35     3.00000       0   0   0   3
   MAX     3.00000       3   3   3   3
 
  SGMGA_VCN:
     I       Q           X
   MIN    -1.00000       0   0   0   0
     1     0.00000       0   0   0   0
     2     1.00000       1   0   0   0
     3     2.00000       2   0   0   0
     4     3.00000       3   0   0   0
     5     1.00000       0   1   0   0
     6     2.00000       1   1   0   0
     7     3.00000       2   1   0   0
     8     2.00000       0   2   0   0
     9     3.00000       1   2   0   0
    10     3.00000       0   3   0   0
    11     1.00000       0   0   1   0
    12     2.00000       1   0   1   0
    13     3.00000       2   0   1   0
    14     2.00000       0   1   1   0
    15     3.00000       1   1   1   0
    16     3.00000       0   2   1   0
    17     2.00000       0   0   2   0
    18     3.00000       1   0   2   0
    19     3.00000       0   1   2   0
    20     3.00000       0   0   3   0
    21     1.00000       0   0   0   1
    22     2.00000       1   0   0   1
    23     3.00000       2   0   0   1
    24     2.00000       0   1   0   1
    25     3.00000       1   1   0   1
    26     3.00000       0   2   0   1
    27     2.00000       0   0   1   1
    28     3.00000       1   0   1   1
    29     3.00000       0   1   1   1
    30     3.00000       0   0   2   1
    31     2.00000       0   0   0   2
    32     3.00000       1   0   0   2
    33     3.00000       0   1   0   2
    34     3.00000       0   0   1   2
    35     3.00000       0   0   0   3
   MAX     3.00000       3   3   3   3
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we just compare the results.
 
  IMPORTANCE:
   1.00000       0.00000       1.00000    
  LEVEL_WEIGHT:
   1.00000       0.00000       1.00000    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN     0.00000       0   0   0
     1     1.00000       1   0   0
     2     2.00000       2   0   0
     3     1.00000       0   0   1
     4     2.00000       1   0   1
     5     2.00000       0   0   2
   MAX     2.00000       2   0   2
 
  SGMGA_VCN:
     I       Q           X
   MIN     0.00000       0   0   0
     1     1.00000       1   0   0
     2     2.00000       2   0   0
     3     1.00000       0   0   1
     4     2.00000       1   0   1
     5     2.00000       0   0   2
   MAX     2.00000       2   0   2
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we just compare the results.
 
  IMPORTANCE:
   1.00000       2.00000    
  LEVEL_WEIGHT:
   1.00000      0.500000    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN    -1.50000       0   0
     1     0.00000       0   0
   MAX     0.00000       0   0
 
  SGMGA_VCN:
     I       Q           X
   MIN    -1.50000       0   0
     1     0.00000       0   0
   MAX     0.00000       0   0
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we just compare the results.
 
  IMPORTANCE:
   1.00000       2.00000    
  LEVEL_WEIGHT:
   1.00000      0.500000    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN   -0.500000       0   0
     1     0.00000       0   0
     2     1.00000       1   0
     3    0.500000       0   1
     4     1.00000       0   2
   MAX     1.00000       1   2
 
  SGMGA_VCN:
     I       Q           X
   MIN   -0.500000       0   0
     1     0.00000       0   0
     2     1.00000       1   0
     3    0.500000       0   1
     4     1.00000       0   2
   MAX     1.00000       1   2
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we just compare the results.
 
  IMPORTANCE:
   1.00000       2.00000    
  LEVEL_WEIGHT:
   1.00000      0.500000    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN    0.500000       0   0
     1     1.00000       1   0
     2     2.00000       2   0
     3     1.50000       1   1
     4     1.00000       0   2
     5     2.00000       1   2
     6     1.50000       0   3
     7     2.00000       0   4
   MAX     2.00000       2   4
 
  SGMGA_VCN:
     I       Q           X
   MIN    0.500000       0   0
     1     1.00000       1   0
     2     2.00000       2   0
     3     1.50000       1   1
     4     1.00000       0   2
     5     2.00000       1   2
     6     1.50000       0   3
     7     2.00000       0   4
   MAX     2.00000       2   4
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we just compare the results.
 
  IMPORTANCE:
   1.00000       2.00000    
  LEVEL_WEIGHT:
   1.00000      0.500000    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN     1.50000       0   0
     1     2.00000       2   0
     2     3.00000       3   0
     3     2.50000       2   1
     4     2.00000       1   2
     5     3.00000       2   2
     6     2.50000       1   3
     7     2.00000       0   4
     8     3.00000       1   4
     9     2.50000       0   5
    10     3.00000       0   6
   MAX     3.00000       3   6
 
  SGMGA_VCN:
     I       Q           X
   MIN     1.50000       0   0
     1     2.00000       2   0
     2     3.00000       3   0
     3     2.50000       2   1
     4     2.00000       1   2
     5     3.00000       2   2
     6     2.50000       1   3
     7     2.00000       0   4
     8     3.00000       1   4
     9     2.50000       0   5
    10     3.00000       0   6
   MAX     3.00000       3   6
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we just compare the results.
 
  IMPORTANCE:
   1.00000       2.00000    
  LEVEL_WEIGHT:
   1.00000      0.500000    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN     2.50000       0   0
     1     3.00000       3   0
     2     4.00000       4   0
     3     3.50000       3   1
     4     3.00000       2   2
     5     4.00000       3   2
     6     3.50000       2   3
     7     3.00000       1   4
     8     4.00000       2   4
     9     3.50000       1   5
    10     3.00000       0   6
    11     4.00000       1   6
    12     3.50000       0   7
    13     4.00000       0   8
   MAX     4.00000       4   8
 
  SGMGA_VCN:
     I       Q           X
   MIN     2.50000       0   0
     1     3.00000       3   0
     2     4.00000       4   0
     3     3.50000       3   1
     4     3.00000       2   2
     5     4.00000       3   2
     6     3.50000       2   3
     7     3.00000       1   4
     8     4.00000       2   4
     9     3.50000       1   5
    10     3.00000       0   6
    11     4.00000       1   6
    12     3.50000       0   7
    13     4.00000       0   8
   MAX     4.00000       4   8
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we just compare the results.
 
  IMPORTANCE:
   1.00000       2.00000       3.00000    
  LEVEL_WEIGHT:
   1.00000      0.500000      0.333333    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN    -1.83333       0   0   0
     1     0.00000       0   0   0
   MAX     0.00000       0   0   0
 
  SGMGA_VCN:
     I       Q           X
   MIN    -1.83333       0   0   0
     1     0.00000       0   0   0
   MAX     0.00000       0   0   0
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we just compare the results.
 
  IMPORTANCE:
   1.00000       2.00000       3.00000    
  LEVEL_WEIGHT:
   1.00000      0.500000      0.333333    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN   -0.833333       0   0   0
     1     0.00000       0   0   0
     2     1.00000       1   0   0
     3    0.500000       0   1   0
     4     1.00000       0   2   0
     5    0.333333       0   0   1
     6    0.833333       0   1   1
     7    0.666667       0   0   2
     8     1.00000       0   0   3
   MAX     1.00000       1   2   3
 
  SGMGA_VCN:
     I       Q           X
   MIN   -0.833333       0   0   0
     1     0.00000       0   0   0
     2     1.00000       1   0   0
     3    0.500000       0   1   0
     4     1.00000       0   2   0
     5    0.333333       0   0   1
     6    0.833333       0   1   1
     7    0.666667       0   0   2
     8     1.00000       0   0   3
   MAX     1.00000       1   2   3
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we just compare the results.
 
  IMPORTANCE:
   1.00000       2.00000       3.00000    
  LEVEL_WEIGHT:
   1.00000      0.500000      0.333333    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN    0.166667       0   0   0
     1     1.00000       1   0   0
     2     2.00000       2   0   0
     3    0.500000       0   1   0
     4     1.50000       1   1   0
     5     1.00000       0   2   0
     6     2.00000       1   2   0
     7     1.50000       0   3   0
     8     2.00000       0   4   0
     9    0.333333       0   0   1
    10     1.33333       1   0   1
    11    0.833333       0   1   1
    12     1.83333       1   1   1
    13     1.33333       0   2   1
    14     1.83333       0   3   1
    15    0.666667       0   0   2
    16     1.66667       1   0   2
    17     1.16667       0   1   2
    18     1.66667       0   2   2
    19     1.00000       0   0   3
    20     2.00000       1   0   3
    21     1.50000       0   1   3
    22     2.00000       0   2   3
    23     1.33333       0   0   4
    24     1.83333       0   1   4
    25     1.66667       0   0   5
    26     2.00000       0   0   6
   MAX     2.00000       2   4   6
 
  SGMGA_VCN:
     I       Q           X
   MIN    0.166667       0   0   0
     1     1.00000       1   0   0
     2     2.00000       2   0   0
     3    0.500000       0   1   0
     4     1.50000       1   1   0
     5     1.00000       0   2   0
     6     2.00000       1   2   0
     7     1.50000       0   3   0
     8     2.00000       0   4   0
     9    0.333333       0   0   1
    10     1.33333       1   0   1
    11    0.833333       0   1   1
    12     1.83333       1   1   1
    13     1.33333       0   2   1
    14     1.83333       0   3   1
    15    0.666667       0   0   2
    16     1.66667       1   0   2
    17     1.16667       0   1   2
    18     1.66667       0   2   2
    19     1.00000       0   0   3
    20     2.00000       1   0   3
    21     1.50000       0   1   3
    22     2.00000       0   2   3
    23     1.33333       0   0   4
    24     1.83333       0   1   4
    25     1.66667       0   0   5
    26     2.00000       0   0   6
   MAX     2.00000       2   4   6
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we just compare the results.
 
  IMPORTANCE:
   1.00000       2.00000       3.00000    
  LEVEL_WEIGHT:
   1.00000      0.500000      0.333333    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN     1.16667       0   0   0
     1     2.00000       2   0   0
     2     3.00000       3   0   0
     3     1.50000       1   1   0
     4     2.50000       2   1   0
     5     2.00000       1   2   0
     6     3.00000       2   2   0
     7     1.50000       0   3   0
     8     2.50000       1   3   0
     9     2.00000       0   4   0
    10     3.00000       1   4   0
    11     2.50000       0   5   0
    12     3.00000       0   6   0
    13     1.33333       1   0   1
    14     2.33333       2   0   1
    15     1.83333       1   1   1
    16     2.83333       2   1   1
    17     1.33333       0   2   1
    18     2.33333       1   2   1
    19     1.83333       0   3   1
    20     2.83333       1   3   1
    21     2.33333       0   4   1
    22     2.83333       0   5   1
    23     1.66667       1   0   2
    24     2.66667       2   0   2
    25     2.16667       1   1   2
    26     1.66667       0   2   2
    27     2.66667       1   2   2
    28     2.16667       0   3   2
    29     2.66667       0   4   2
    30     2.00000       1   0   3
    31     3.00000       2   0   3
    32     1.50000       0   1   3
    33     2.50000       1   1   3
    34     2.00000       0   2   3
    35     3.00000       1   2   3
    36     2.50000       0   3   3
    37     3.00000       0   4   3
    38     1.33333       0   0   4
    39     2.33333       1   0   4
    40     1.83333       0   1   4
    41     2.83333       1   1   4
    42     2.33333       0   2   4
    43     2.83333       0   3   4
    44     1.66667       0   0   5
    45     2.66667       1   0   5
    46     2.16667       0   1   5
    47     2.66667       0   2   5
    48     2.00000       0   0   6
    49     3.00000       1   0   6
    50     2.50000       0   1   6
    51     3.00000       0   2   6
    52     2.33333       0   0   7
    53     2.83333       0   1   7
    54     2.66667       0   0   8
    55     3.00000       0   0   9
   MAX     3.00000       3   6   9
 
  SGMGA_VCN:
     I       Q           X
   MIN     1.16667       0   0   0
     1     2.00000       2   0   0
     2     3.00000       3   0   0
     3     1.50000       1   1   0
     4     2.50000       2   1   0
     5     2.00000       1   2   0
     6     3.00000       2   2   0
     7     1.50000       0   3   0
     8     2.50000       1   3   0
     9     2.00000       0   4   0
    10     3.00000       1   4   0
    11     2.50000       0   5   0
    12     3.00000       0   6   0
    13     1.33333       1   0   1
    14     2.33333       2   0   1
    15     1.83333       1   1   1
    16     2.83333       2   1   1
    17     1.33333       0   2   1
    18     2.33333       1   2   1
    19     1.83333       0   3   1
    20     2.83333       1   3   1
    21     2.33333       0   4   1
    22     2.83333       0   5   1
    23     1.66667       1   0   2
    24     2.66667       2   0   2
    25     2.16667       1   1   2
    26     1.66667       0   2   2
    27     2.66667       1   2   2
    28     2.16667       0   3   2
    29     2.66667       0   4   2
    30     2.00000       1   0   3
    31     3.00000       2   0   3
    32     1.50000       0   1   3
    33     2.50000       1   1   3
    34     2.00000       0   2   3
    35     3.00000       1   2   3
    36     2.50000       0   3   3
    37     3.00000       0   4   3
    38     1.33333       0   0   4
    39     2.33333       1   0   4
    40     1.83333       0   1   4
    41     2.83333       1   1   4
    42     2.33333       0   2   4
    43     2.83333       0   3   4
    44     1.66667       0   0   5
    45     2.66667       1   0   5
    46     2.16667       0   1   5
    47     2.66667       0   2   5
    48     2.00000       0   0   6
    49     3.00000       1   0   6
    50     2.50000       0   1   6
    51     3.00000       0   2   6
    52     2.33333       0   0   7
    53     2.83333       0   1   7
    54     2.66667       0   0   8
    55     3.00000       0   0   9
   MAX     3.00000       3   6   9
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we just compare the results.
 
  IMPORTANCE:
   1.00000       2.00000       3.00000    
  LEVEL_WEIGHT:
   1.00000      0.500000      0.333333    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN     2.16667       0   0   0
     1     3.00000       3   0   0
     2     4.00000       4   0   0
     3     2.50000       2   1   0
     4     3.50000       3   1   0
     5     3.00000       2   2   0
     6     4.00000       3   2   0
     7     2.50000       1   3   0
     8     3.50000       2   3   0
     9     3.00000       1   4   0
    10     4.00000       2   4   0
    11     2.50000       0   5   0
    12     3.50000       1   5   0
    13     3.00000       0   6   0
    14     4.00000       1   6   0
    15     3.50000       0   7   0
    16     4.00000       0   8   0
    17     2.33333       2   0   1
    18     3.33333       3   0   1
    19     2.83333       2   1   1
    20     3.83333       3   1   1
    21     2.33333       1   2   1
    22     3.33333       2   2   1
    23     2.83333       1   3   1
    24     3.83333       2   3   1
    25     2.33333       0   4   1
    26     3.33333       1   4   1
    27     2.83333       0   5   1
    28     3.83333       1   5   1
    29     3.33333       0   6   1
    30     3.83333       0   7   1
    31     2.66667       2   0   2
    32     3.66667       3   0   2
    33     3.16667       2   1   2
    34     2.66667       1   2   2
    35     3.66667       2   2   2
    36     3.16667       1   3   2
    37     2.66667       0   4   2
    38     3.66667       1   4   2
    39     3.16667       0   5   2
    40     3.66667       0   6   2
    41     3.00000       2   0   3
    42     4.00000       3   0   3
    43     2.50000       1   1   3
    44     3.50000       2   1   3
    45     3.00000       1   2   3
    46     4.00000       2   2   3
    47     2.50000       0   3   3
    48     3.50000       1   3   3
    49     3.00000       0   4   3
    50     4.00000       1   4   3
    51     3.50000       0   5   3
    52     4.00000       0   6   3
    53     2.33333       1   0   4
    54     3.33333       2   0   4
    55     2.83333       1   1   4
    56     3.83333       2   1   4
    57     2.33333       0   2   4
    58     3.33333       1   2   4
    59     2.83333       0   3   4
    60     3.83333       1   3   4
    61     3.33333       0   4   4
    62     3.83333       0   5   4
    63     2.66667       1   0   5
    64     3.66667       2   0   5
    65     3.16667       1   1   5
    66     2.66667       0   2   5
    67     3.66667       1   2   5
    68     3.16667       0   3   5
    69     3.66667       0   4   5
    70     3.00000       1   0   6
    71     4.00000       2   0   6
    72     2.50000       0   1   6
    73     3.50000       1   1   6
    74     3.00000       0   2   6
    75     4.00000       1   2   6
    76     3.50000       0   3   6
    77     4.00000       0   4   6
    78     2.33333       0   0   7
    79     3.33333       1   0   7
    80     2.83333       0   1   7
    81     3.83333       1   1   7
    82     3.33333       0   2   7
    83     3.83333       0   3   7
    84     2.66667       0   0   8
    85     3.66667       1   0   8
    86     3.16667       0   1   8
    87     3.66667       0   2   8
    88     3.00000       0   0   9
    89     4.00000       1   0   9
    90     3.50000       0   1   9
    91     4.00000       0   2   9
    92     3.33333       0   0  10
    93     3.83333       0   1  10
    94     3.66667       0   0  11
    95     4.00000       0   0  12
   MAX     4.00000       4   8  12
 
  SGMGA_VCN:
     I       Q           X
   MIN     2.16667       0   0   0
     1     3.00000       3   0   0
     2     4.00000       4   0   0
     3     2.50000       2   1   0
     4     3.50000       3   1   0
     5     3.00000       2   2   0
     6     4.00000       3   2   0
     7     2.50000       1   3   0
     8     3.50000       2   3   0
     9     3.00000       1   4   0
    10     4.00000       2   4   0
    11     2.50000       0   5   0
    12     3.50000       1   5   0
    13     3.00000       0   6   0
    14     4.00000       1   6   0
    15     3.50000       0   7   0
    16     4.00000       0   8   0
    17     2.33333       2   0   1
    18     3.33333       3   0   1
    19     2.83333       2   1   1
    20     3.83333       3   1   1
    21     2.33333       1   2   1
    22     3.33333       2   2   1
    23     2.83333       1   3   1
    24     3.83333       2   3   1
    25     2.33333       0   4   1
    26     3.33333       1   4   1
    27     2.83333       0   5   1
    28     3.83333       1   5   1
    29     3.33333       0   6   1
    30     3.83333       0   7   1
    31     2.66667       2   0   2
    32     3.66667       3   0   2
    33     3.16667       2   1   2
    34     2.66667       1   2   2
    35     3.66667       2   2   2
    36     3.16667       1   3   2
    37     2.66667       0   4   2
    38     3.66667       1   4   2
    39     3.16667       0   5   2
    40     3.66667       0   6   2
    41     3.00000       2   0   3
    42     4.00000       3   0   3
    43     2.50000       1   1   3
    44     3.50000       2   1   3
    45     3.00000       1   2   3
    46     4.00000       2   2   3
    47     2.50000       0   3   3
    48     3.50000       1   3   3
    49     3.00000       0   4   3
    50     4.00000       1   4   3
    51     3.50000       0   5   3
    52     4.00000       0   6   3
    53     2.33333       1   0   4
    54     3.33333       2   0   4
    55     2.83333       1   1   4
    56     3.83333       2   1   4
    57     2.33333       0   2   4
    58     3.33333       1   2   4
    59     2.83333       0   3   4
    60     3.83333       1   3   4
    61     3.33333       0   4   4
    62     3.83333       0   5   4
    63     2.66667       1   0   5
    64     3.66667       2   0   5
    65     3.16667       1   1   5
    66     2.66667       0   2   5
    67     3.66667       1   2   5
    68     3.16667       0   3   5
    69     3.66667       0   4   5
    70     3.00000       1   0   6
    71     4.00000       2   0   6
    72     2.50000       0   1   6
    73     3.50000       1   1   6
    74     3.00000       0   2   6
    75     4.00000       1   2   6
    76     3.50000       0   3   6
    77     4.00000       0   4   6
    78     2.33333       0   0   7
    79     3.33333       1   0   7
    80     2.83333       0   1   7
    81     3.83333       1   1   7
    82     3.33333       0   2   7
    83     3.83333       0   3   7
    84     2.66667       0   0   8
    85     3.66667       1   0   8
    86     3.16667       0   1   8
    87     3.66667       0   2   8
    88     3.00000       0   0   9
    89     4.00000       1   0   9
    90     3.50000       0   1   9
    91     4.00000       0   2   9
    92     3.33333       0   0  10
    93     3.83333       0   1  10
    94     3.66667       0   0  11
    95     4.00000       0   0  12
   MAX     4.00000       4   8  12
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we just compare the results.
 
  IMPORTANCE:
   1.00000       2.00000       3.00000       4.00000    
  LEVEL_WEIGHT:
   1.00000      0.500000      0.333333      0.250000    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN   -0.833333E-01   0   0   0   0
     1     0.00000       0   0   0   0
     2     1.00000       1   0   0   0
     3     2.00000       2   0   0   0
     4    0.500000       0   1   0   0
     5     1.50000       1   1   0   0
     6     1.00000       0   2   0   0
     7     2.00000       1   2   0   0
     8     1.50000       0   3   0   0
     9     2.00000       0   4   0   0
    10    0.333333       0   0   1   0
    11     1.33333       1   0   1   0
    12    0.833333       0   1   1   0
    13     1.83333       1   1   1   0
    14     1.33333       0   2   1   0
    15     1.83333       0   3   1   0
    16    0.666667       0   0   2   0
    17     1.66667       1   0   2   0
    18     1.16667       0   1   2   0
    19     1.66667       0   2   2   0
    20     1.00000       0   0   3   0
    21     2.00000       1   0   3   0
    22     1.50000       0   1   3   0
    23     2.00000       0   2   3   0
    24     1.33333       0   0   4   0
    25     1.83333       0   1   4   0
    26     1.66667       0   0   5   0
    27     2.00000       0   0   6   0
    28    0.250000       0   0   0   1
    29     1.25000       1   0   0   1
    30    0.750000       0   1   0   1
    31     1.75000       1   1   0   1
    32     1.25000       0   2   0   1
    33     1.75000       0   3   0   1
    34    0.583333       0   0   1   1
    35     1.58333       1   0   1   1
    36     1.08333       0   1   1   1
    37     1.58333       0   2   1   1
    38    0.916667       0   0   2   1
    39     1.91667       1   0   2   1
    40     1.41667       0   1   2   1
    41     1.91667       0   2   2   1
    42     1.25000       0   0   3   1
    43     1.75000       0   1   3   1
    44     1.58333       0   0   4   1
    45     1.91667       0   0   5   1
    46    0.500000       0   0   0   2
    47     1.50000       1   0   0   2
    48     1.00000       0   1   0   2
    49     2.00000       1   1   0   2
    50     1.50000       0   2   0   2
    51     2.00000       0   3   0   2
    52    0.833333       0   0   1   2
    53     1.83333       1   0   1   2
    54     1.33333       0   1   1   2
    55     1.83333       0   2   1   2
    56     1.16667       0   0   2   2
    57     1.66667       0   1   2   2
    58     1.50000       0   0   3   2
    59     2.00000       0   1   3   2
    60     1.83333       0   0   4   2
    61    0.750000       0   0   0   3
    62     1.75000       1   0   0   3
    63     1.25000       0   1   0   3
    64     1.75000       0   2   0   3
    65     1.08333       0   0   1   3
    66     1.58333       0   1   1   3
    67     1.41667       0   0   2   3
    68     1.91667       0   1   2   3
    69     1.75000       0   0   3   3
    70     1.00000       0   0   0   4
    71     2.00000       1   0   0   4
    72     1.50000       0   1   0   4
    73     2.00000       0   2   0   4
    74     1.33333       0   0   1   4
    75     1.83333       0   1   1   4
    76     1.66667       0   0   2   4
    77     2.00000       0   0   3   4
    78     1.25000       0   0   0   5
    79     1.75000       0   1   0   5
    80     1.58333       0   0   1   5
    81     1.91667       0   0   2   5
    82     1.50000       0   0   0   6
    83     2.00000       0   1   0   6
    84     1.83333       0   0   1   6
    85     1.75000       0   0   0   7
    86     2.00000       0   0   0   8
   MAX     2.00000       2   4   6   8
 
  SGMGA_VCN:
     I       Q           X
   MIN   -0.833333E-01   0   0   0   0
     1     0.00000       0   0   0   0
     2     1.00000       1   0   0   0
     3     2.00000       2   0   0   0
     4    0.500000       0   1   0   0
     5     1.50000       1   1   0   0
     6     1.00000       0   2   0   0
     7     2.00000       1   2   0   0
     8     1.50000       0   3   0   0
     9     2.00000       0   4   0   0
    10    0.333333       0   0   1   0
    11     1.33333       1   0   1   0
    12    0.833333       0   1   1   0
    13     1.83333       1   1   1   0
    14     1.33333       0   2   1   0
    15     1.83333       0   3   1   0
    16    0.666667       0   0   2   0
    17     1.66667       1   0   2   0
    18     1.16667       0   1   2   0
    19     1.66667       0   2   2   0
    20     1.00000       0   0   3   0
    21     2.00000       1   0   3   0
    22     1.50000       0   1   3   0
    23     2.00000       0   2   3   0
    24     1.33333       0   0   4   0
    25     1.83333       0   1   4   0
    26     1.66667       0   0   5   0
    27     2.00000       0   0   6   0
    28    0.250000       0   0   0   1
    29     1.25000       1   0   0   1
    30    0.750000       0   1   0   1
    31     1.75000       1   1   0   1
    32     1.25000       0   2   0   1
    33     1.75000       0   3   0   1
    34    0.583333       0   0   1   1
    35     1.58333       1   0   1   1
    36     1.08333       0   1   1   1
    37     1.58333       0   2   1   1
    38    0.916667       0   0   2   1
    39     1.91667       1   0   2   1
    40     1.41667       0   1   2   1
    41     1.91667       0   2   2   1
    42     1.25000       0   0   3   1
    43     1.75000       0   1   3   1
    44     1.58333       0   0   4   1
    45     1.91667       0   0   5   1
    46    0.500000       0   0   0   2
    47     1.50000       1   0   0   2
    48     1.00000       0   1   0   2
    49     2.00000       1   1   0   2
    50     1.50000       0   2   0   2
    51     2.00000       0   3   0   2
    52    0.833333       0   0   1   2
    53     1.83333       1   0   1   2
    54     1.33333       0   1   1   2
    55     1.83333       0   2   1   2
    56     1.16667       0   0   2   2
    57     1.66667       0   1   2   2
    58     1.50000       0   0   3   2
    59     2.00000       0   1   3   2
    60     1.83333       0   0   4   2
    61    0.750000       0   0   0   3
    62     1.75000       1   0   0   3
    63     1.25000       0   1   0   3
    64     1.75000       0   2   0   3
    65     1.08333       0   0   1   3
    66     1.58333       0   1   1   3
    67     1.41667       0   0   2   3
    68     1.91667       0   1   2   3
    69     1.75000       0   0   3   3
    70     1.00000       0   0   0   4
    71     2.00000       1   0   0   4
    72     1.50000       0   1   0   4
    73     2.00000       0   2   0   4
    74     1.33333       0   0   1   4
    75     1.83333       0   1   1   4
    76     1.66667       0   0   2   4
    77     2.00000       0   0   3   4
    78     1.25000       0   0   0   5
    79     1.75000       0   1   0   5
    80     1.58333       0   0   1   5
    81     1.91667       0   0   2   5
    82     1.50000       0   0   0   6
    83     2.00000       0   1   0   6
    84     1.83333       0   0   1   6
    85     1.75000       0   0   0   7
    86     2.00000       0   0   0   8
   MAX     2.00000       2   4   6   8
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we just compare the results.
 
  IMPORTANCE:
   1.00000       2.00000       3.00000       4.00000    
  LEVEL_WEIGHT:
   1.00000      0.500000      0.333333      0.250000    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN    0.916667       0   0   0   0
     1     1.00000       1   0   0   0
     2     2.00000       2   0   0   0
     3     3.00000       3   0   0   0
     4     1.50000       1   1   0   0
     5     2.50000       2   1   0   0
     6     1.00000       0   2   0   0
     7     2.00000       1   2   0   0
     8     3.00000       2   2   0   0
     9     1.50000       0   3   0   0
    10     2.50000       1   3   0   0
    11     2.00000       0   4   0   0
    12     3.00000       1   4   0   0
    13     2.50000       0   5   0   0
    14     3.00000       0   6   0   0
    15     1.33333       1   0   1   0
    16     2.33333       2   0   1   0
    17     1.83333       1   1   1   0
    18     2.83333       2   1   1   0
    19     1.33333       0   2   1   0
    20     2.33333       1   2   1   0
    21     1.83333       0   3   1   0
    22     2.83333       1   3   1   0
    23     2.33333       0   4   1   0
    24     2.83333       0   5   1   0
    25     1.66667       1   0   2   0
    26     2.66667       2   0   2   0
    27     1.16667       0   1   2   0
    28     2.16667       1   1   2   0
    29     1.66667       0   2   2   0
    30     2.66667       1   2   2   0
    31     2.16667       0   3   2   0
    32     2.66667       0   4   2   0
    33     1.00000       0   0   3   0
    34     2.00000       1   0   3   0
    35     3.00000       2   0   3   0
    36     1.50000       0   1   3   0
    37     2.50000       1   1   3   0
    38     2.00000       0   2   3   0
    39     3.00000       1   2   3   0
    40     2.50000       0   3   3   0
    41     3.00000       0   4   3   0
    42     1.33333       0   0   4   0
    43     2.33333       1   0   4   0
    44     1.83333       0   1   4   0
    45     2.83333       1   1   4   0
    46     2.33333       0   2   4   0
    47     2.83333       0   3   4   0
    48     1.66667       0   0   5   0
    49     2.66667       1   0   5   0
    50     2.16667       0   1   5   0
    51     2.66667       0   2   5   0
    52     2.00000       0   0   6   0
    53     3.00000       1   0   6   0
    54     2.50000       0   1   6   0
    55     3.00000       0   2   6   0
    56     2.33333       0   0   7   0
    57     2.83333       0   1   7   0
    58     2.66667       0   0   8   0
    59     3.00000       0   0   9   0
    60     1.25000       1   0   0   1
    61     2.25000       2   0   0   1
    62     1.75000       1   1   0   1
    63     2.75000       2   1   0   1
    64     1.25000       0   2   0   1
    65     2.25000       1   2   0   1
    66     1.75000       0   3   0   1
    67     2.75000       1   3   0   1
    68     2.25000       0   4   0   1
    69     2.75000       0   5   0   1
    70     1.58333       1   0   1   1
    71     2.58333       2   0   1   1
    72     1.08333       0   1   1   1
    73     2.08333       1   1   1   1
    74     1.58333       0   2   1   1
    75     2.58333       1   2   1   1
    76     2.08333       0   3   1   1
    77     2.58333       0   4   1   1
    78     1.91667       1   0   2   1
    79     2.91667       2   0   2   1
    80     1.41667       0   1   2   1
    81     2.41667       1   1   2   1
    82     1.91667       0   2   2   1
    83     2.91667       1   2   2   1
    84     2.41667       0   3   2   1
    85     2.91667       0   4   2   1
    86     1.25000       0   0   3   1
    87     2.25000       1   0   3   1
    88     1.75000       0   1   3   1
    89     2.75000       1   1   3   1
    90     2.25000       0   2   3   1
    91     2.75000       0   3   3   1
    92     1.58333       0   0   4   1
    93     2.58333       1   0   4   1
    94     2.08333       0   1   4   1
    95     2.58333       0   2   4   1
    96     1.91667       0   0   5   1
    97     2.91667       1   0   5   1
    98     2.41667       0   1   5   1
    99     2.91667       0   2   5   1
   100     2.25000       0   0   6   1
   101     2.75000       0   1   6   1
   102     2.58333       0   0   7   1
   103     2.91667       0   0   8   1
   104     1.50000       1   0   0   2
   105     2.50000       2   0   0   2
   106     1.00000       0   1   0   2
   107     2.00000       1   1   0   2
   108     3.00000       2   1   0   2
   109     1.50000       0   2   0   2
   110     2.50000       1   2   0   2
   111     2.00000       0   3   0   2
   112     3.00000       1   3   0   2
   113     2.50000       0   4   0   2
   114     3.00000       0   5   0   2
   115     1.83333       1   0   1   2
   116     2.83333       2   0   1   2
   117     1.33333       0   1   1   2
   118     2.33333       1   1   1   2
   119     1.83333       0   2   1   2
   120     2.83333       1   2   1   2
   121     2.33333       0   3   1   2
   122     2.83333       0   4   1   2
   123     1.16667       0   0   2   2
   124     2.16667       1   0   2   2
   125     1.66667       0   1   2   2
   126     2.66667       1   1   2   2
   127     2.16667       0   2   2   2
   128     2.66667       0   3   2   2
   129     1.50000       0   0   3   2
   130     2.50000       1   0   3   2
   131     2.00000       0   1   3   2
   132     3.00000       1   1   3   2
   133     2.50000       0   2   3   2
   134     3.00000       0   3   3   2
   135     1.83333       0   0   4   2
   136     2.83333       1   0   4   2
   137     2.33333       0   1   4   2
   138     2.83333       0   2   4   2
   139     2.16667       0   0   5   2
   140     2.66667       0   1   5   2
   141     2.50000       0   0   6   2
   142     3.00000       0   1   6   2
   143     2.83333       0   0   7   2
   144     1.75000       1   0   0   3
   145     2.75000       2   0   0   3
   146     1.25000       0   1   0   3
   147     2.25000       1   1   0   3
   148     1.75000       0   2   0   3
   149     2.75000       1   2   0   3
   150     2.25000       0   3   0   3
   151     2.75000       0   4   0   3
   152     1.08333       0   0   1   3
   153     2.08333       1   0   1   3
   154     1.58333       0   1   1   3
   155     2.58333       1   1   1   3
   156     2.08333       0   2   1   3
   157     2.58333       0   3   1   3
   158     1.41667       0   0   2   3
   159     2.41667       1   0   2   3
   160     1.91667       0   1   2   3
   161     2.91667       1   1   2   3
   162     2.41667       0   2   2   3
   163     2.91667       0   3   2   3
   164     1.75000       0   0   3   3
   165     2.75000       1   0   3   3
   166     2.25000       0   1   3   3
   167     2.75000       0   2   3   3
   168     2.08333       0   0   4   3
   169     2.58333       0   1   4   3
   170     2.41667       0   0   5   3
   171     2.91667       0   1   5   3
   172     2.75000       0   0   6   3
   173     1.00000       0   0   0   4
   174     2.00000       1   0   0   4
   175     3.00000       2   0   0   4
   176     1.50000       0   1   0   4
   177     2.50000       1   1   0   4
   178     2.00000       0   2   0   4
   179     3.00000       1   2   0   4
   180     2.50000       0   3   0   4
   181     3.00000       0   4   0   4
   182     1.33333       0   0   1   4
   183     2.33333       1   0   1   4
   184     1.83333       0   1   1   4
   185     2.83333       1   1   1   4
   186     2.33333       0   2   1   4
   187     2.83333       0   3   1   4
   188     1.66667       0   0   2   4
   189     2.66667       1   0   2   4
   190     2.16667       0   1   2   4
   191     2.66667       0   2   2   4
   192     2.00000       0   0   3   4
   193     3.00000       1   0   3   4
   194     2.50000       0   1   3   4
   195     3.00000       0   2   3   4
   196     2.33333       0   0   4   4
   197     2.83333       0   1   4   4
   198     2.66667       0   0   5   4
   199     3.00000       0   0   6   4
   200     1.25000       0   0   0   5
   201     2.25000       1   0   0   5
   202     1.75000       0   1   0   5
   203     2.75000       1   1   0   5
   204     2.25000       0   2   0   5
   205     2.75000       0   3   0   5
   206     1.58333       0   0   1   5
   207     2.58333       1   0   1   5
   208     2.08333       0   1   1   5
   209     2.58333       0   2   1   5
   210     1.91667       0   0   2   5
   211     2.91667       1   0   2   5
   212     2.41667       0   1   2   5
   213     2.91667       0   2   2   5
   214     2.25000       0   0   3   5
   215     2.75000       0   1   3   5
   216     2.58333       0   0   4   5
   217     2.91667       0   0   5   5
   218     1.50000       0   0   0   6
   219     2.50000       1   0   0   6
   220     2.00000       0   1   0   6
   221     3.00000       1   1   0   6
   222     2.50000       0   2   0   6
   223     3.00000       0   3   0   6
   224     1.83333       0   0   1   6
   225     2.83333       1   0   1   6
   226     2.33333       0   1   1   6
   227     2.83333       0   2   1   6
   228     2.16667       0   0   2   6
   229     2.66667       0   1   2   6
   230     2.50000       0   0   3   6
   231     3.00000       0   1   3   6
   232     2.83333       0   0   4   6
   233     1.75000       0   0   0   7
   234     2.75000       1   0   0   7
   235     2.25000       0   1   0   7
   236     2.75000       0   2   0   7
   237     2.08333       0   0   1   7
   238     2.58333       0   1   1   7
   239     2.41667       0   0   2   7
   240     2.91667       0   1   2   7
   241     2.75000       0   0   3   7
   242     2.00000       0   0   0   8
   243     3.00000       1   0   0   8
   244     2.50000       0   1   0   8
   245     3.00000       0   2   0   8
   246     2.33333       0   0   1   8
   247     2.83333       0   1   1   8
   248     2.66667       0   0   2   8
   249     3.00000       0   0   3   8
   250     2.25000       0   0   0   9
   251     2.75000       0   1   0   9
   252     2.58333       0   0   1   9
   253     2.91667       0   0   2   9
   254     2.50000       0   0   0  10
   255     3.00000       0   1   0  10
   256     2.83333       0   0   1  10
   257     2.75000       0   0   0  11
   258     3.00000       0   0   0  12
   MAX     3.00000       3   6   9  12
 
  SGMGA_VCN:
     I       Q           X
   MIN    0.916667       0   0   0   0
     1     1.00000       1   0   0   0
     2     2.00000       2   0   0   0
     3     3.00000       3   0   0   0
     4     1.50000       1   1   0   0
     5     2.50000       2   1   0   0
     6     1.00000       0   2   0   0
     7     2.00000       1   2   0   0
     8     3.00000       2   2   0   0
     9     1.50000       0   3   0   0
    10     2.50000       1   3   0   0
    11     2.00000       0   4   0   0
    12     3.00000       1   4   0   0
    13     2.50000       0   5   0   0
    14     3.00000       0   6   0   0
    15     1.33333       1   0   1   0
    16     2.33333       2   0   1   0
    17     1.83333       1   1   1   0
    18     2.83333       2   1   1   0
    19     1.33333       0   2   1   0
    20     2.33333       1   2   1   0
    21     1.83333       0   3   1   0
    22     2.83333       1   3   1   0
    23     2.33333       0   4   1   0
    24     2.83333       0   5   1   0
    25     1.66667       1   0   2   0
    26     2.66667       2   0   2   0
    27     1.16667       0   1   2   0
    28     2.16667       1   1   2   0
    29     1.66667       0   2   2   0
    30     2.66667       1   2   2   0
    31     2.16667       0   3   2   0
    32     2.66667       0   4   2   0
    33     1.00000       0   0   3   0
    34     2.00000       1   0   3   0
    35     3.00000       2   0   3   0
    36     1.50000       0   1   3   0
    37     2.50000       1   1   3   0
    38     2.00000       0   2   3   0
    39     3.00000       1   2   3   0
    40     2.50000       0   3   3   0
    41     3.00000       0   4   3   0
    42     1.33333       0   0   4   0
    43     2.33333       1   0   4   0
    44     1.83333       0   1   4   0
    45     2.83333       1   1   4   0
    46     2.33333       0   2   4   0
    47     2.83333       0   3   4   0
    48     1.66667       0   0   5   0
    49     2.66667       1   0   5   0
    50     2.16667       0   1   5   0
    51     2.66667       0   2   5   0
    52     2.00000       0   0   6   0
    53     3.00000       1   0   6   0
    54     2.50000       0   1   6   0
    55     3.00000       0   2   6   0
    56     2.33333       0   0   7   0
    57     2.83333       0   1   7   0
    58     2.66667       0   0   8   0
    59     3.00000       0   0   9   0
    60     1.25000       1   0   0   1
    61     2.25000       2   0   0   1
    62     1.75000       1   1   0   1
    63     2.75000       2   1   0   1
    64     1.25000       0   2   0   1
    65     2.25000       1   2   0   1
    66     1.75000       0   3   0   1
    67     2.75000       1   3   0   1
    68     2.25000       0   4   0   1
    69     2.75000       0   5   0   1
    70     1.58333       1   0   1   1
    71     2.58333       2   0   1   1
    72     1.08333       0   1   1   1
    73     2.08333       1   1   1   1
    74     1.58333       0   2   1   1
    75     2.58333       1   2   1   1
    76     2.08333       0   3   1   1
    77     2.58333       0   4   1   1
    78     1.91667       1   0   2   1
    79     2.91667       2   0   2   1
    80     1.41667       0   1   2   1
    81     2.41667       1   1   2   1
    82     1.91667       0   2   2   1
    83     2.91667       1   2   2   1
    84     2.41667       0   3   2   1
    85     2.91667       0   4   2   1
    86     1.25000       0   0   3   1
    87     2.25000       1   0   3   1
    88     1.75000       0   1   3   1
    89     2.75000       1   1   3   1
    90     2.25000       0   2   3   1
    91     2.75000       0   3   3   1
    92     1.58333       0   0   4   1
    93     2.58333       1   0   4   1
    94     2.08333       0   1   4   1
    95     2.58333       0   2   4   1
    96     1.91667       0   0   5   1
    97     2.91667       1   0   5   1
    98     2.41667       0   1   5   1
    99     2.91667       0   2   5   1
   100     2.25000       0   0   6   1
   101     2.75000       0   1   6   1
   102     2.58333       0   0   7   1
   103     2.91667       0   0   8   1
   104     1.50000       1   0   0   2
   105     2.50000       2   0   0   2
   106     1.00000       0   1   0   2
   107     2.00000       1   1   0   2
   108     3.00000       2   1   0   2
   109     1.50000       0   2   0   2
   110     2.50000       1   2   0   2
   111     2.00000       0   3   0   2
   112     3.00000       1   3   0   2
   113     2.50000       0   4   0   2
   114     3.00000       0   5   0   2
   115     1.83333       1   0   1   2
   116     2.83333       2   0   1   2
   117     1.33333       0   1   1   2
   118     2.33333       1   1   1   2
   119     1.83333       0   2   1   2
   120     2.83333       1   2   1   2
   121     2.33333       0   3   1   2
   122     2.83333       0   4   1   2
   123     1.16667       0   0   2   2
   124     2.16667       1   0   2   2
   125     1.66667       0   1   2   2
   126     2.66667       1   1   2   2
   127     2.16667       0   2   2   2
   128     2.66667       0   3   2   2
   129     1.50000       0   0   3   2
   130     2.50000       1   0   3   2
   131     2.00000       0   1   3   2
   132     3.00000       1   1   3   2
   133     2.50000       0   2   3   2
   134     3.00000       0   3   3   2
   135     1.83333       0   0   4   2
   136     2.83333       1   0   4   2
   137     2.33333       0   1   4   2
   138     2.83333       0   2   4   2
   139     2.16667       0   0   5   2
   140     2.66667       0   1   5   2
   141     2.50000       0   0   6   2
   142     3.00000       0   1   6   2
   143     2.83333       0   0   7   2
   144     1.75000       1   0   0   3
   145     2.75000       2   0   0   3
   146     1.25000       0   1   0   3
   147     2.25000       1   1   0   3
   148     1.75000       0   2   0   3
   149     2.75000       1   2   0   3
   150     2.25000       0   3   0   3
   151     2.75000       0   4   0   3
   152     1.08333       0   0   1   3
   153     2.08333       1   0   1   3
   154     1.58333       0   1   1   3
   155     2.58333       1   1   1   3
   156     2.08333       0   2   1   3
   157     2.58333       0   3   1   3
   158     1.41667       0   0   2   3
   159     2.41667       1   0   2   3
   160     1.91667       0   1   2   3
   161     2.91667       1   1   2   3
   162     2.41667       0   2   2   3
   163     2.91667       0   3   2   3
   164     1.75000       0   0   3   3
   165     2.75000       1   0   3   3
   166     2.25000       0   1   3   3
   167     2.75000       0   2   3   3
   168     2.08333       0   0   4   3
   169     2.58333       0   1   4   3
   170     2.41667       0   0   5   3
   171     2.91667       0   1   5   3
   172     2.75000       0   0   6   3
   173     1.00000       0   0   0   4
   174     2.00000       1   0   0   4
   175     3.00000       2   0   0   4
   176     1.50000       0   1   0   4
   177     2.50000       1   1   0   4
   178     2.00000       0   2   0   4
   179     3.00000       1   2   0   4
   180     2.50000       0   3   0   4
   181     3.00000       0   4   0   4
   182     1.33333       0   0   1   4
   183     2.33333       1   0   1   4
   184     1.83333       0   1   1   4
   185     2.83333       1   1   1   4
   186     2.33333       0   2   1   4
   187     2.83333       0   3   1   4
   188     1.66667       0   0   2   4
   189     2.66667       1   0   2   4
   190     2.16667       0   1   2   4
   191     2.66667       0   2   2   4
   192     2.00000       0   0   3   4
   193     3.00000       1   0   3   4
   194     2.50000       0   1   3   4
   195     3.00000       0   2   3   4
   196     2.33333       0   0   4   4
   197     2.83333       0   1   4   4
   198     2.66667       0   0   5   4
   199     3.00000       0   0   6   4
   200     1.25000       0   0   0   5
   201     2.25000       1   0   0   5
   202     1.75000       0   1   0   5
   203     2.75000       1   1   0   5
   204     2.25000       0   2   0   5
   205     2.75000       0   3   0   5
   206     1.58333       0   0   1   5
   207     2.58333       1   0   1   5
   208     2.08333       0   1   1   5
   209     2.58333       0   2   1   5
   210     1.91667       0   0   2   5
   211     2.91667       1   0   2   5
   212     2.41667       0   1   2   5
   213     2.91667       0   2   2   5
   214     2.25000       0   0   3   5
   215     2.75000       0   1   3   5
   216     2.58333       0   0   4   5
   217     2.91667       0   0   5   5
   218     1.50000       0   0   0   6
   219     2.50000       1   0   0   6
   220     2.00000       0   1   0   6
   221     3.00000       1   1   0   6
   222     2.50000       0   2   0   6
   223     3.00000       0   3   0   6
   224     1.83333       0   0   1   6
   225     2.83333       1   0   1   6
   226     2.33333       0   1   1   6
   227     2.83333       0   2   1   6
   228     2.16667       0   0   2   6
   229     2.66667       0   1   2   6
   230     2.50000       0   0   3   6
   231     3.00000       0   1   3   6
   232     2.83333       0   0   4   6
   233     1.75000       0   0   0   7
   234     2.75000       1   0   0   7
   235     2.25000       0   1   0   7
   236     2.75000       0   2   0   7
   237     2.08333       0   0   1   7
   238     2.58333       0   1   1   7
   239     2.41667       0   0   2   7
   240     2.91667       0   1   2   7
   241     2.75000       0   0   3   7
   242     2.00000       0   0   0   8
   243     3.00000       1   0   0   8
   244     2.50000       0   1   0   8
   245     3.00000       0   2   0   8
   246     2.33333       0   0   1   8
   247     2.83333       0   1   1   8
   248     2.66667       0   0   2   8
   249     3.00000       0   0   3   8
   250     2.25000       0   0   0   9
   251     2.75000       0   1   0   9
   252     2.58333       0   0   1   9
   253     2.91667       0   0   2   9
   254     2.50000       0   0   0  10
   255     3.00000       0   1   0  10
   256     2.83333       0   0   1  10
   257     2.75000       0   0   0  11
   258     3.00000       0   0   0  12
   MAX     3.00000       3   6   9  12
 
SGMGA_VCN_TIMING_TESTS
  calls SGMGA_VCN_TIMING_TEST.
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we compare the timings.
 
  IMPORTANCE:
   1.00000       1.00000       1.00000       1.00000    
  LEVEL_WEIGHT:
   1.00000       1.00000       1.00000       1.00000    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN    -2.00000       0   0   0   0
   MAX     2.00000       2   2   2   2
  TIME    0.400000E-05
 
  SGMGA_VCN:
     I       Q           X
   MIN    -2.00000       0   0   0   0
   MAX     2.00000       2   2   2   2
  TIME    0.300000E-05
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we compare the timings.
 
  IMPORTANCE:
   1.00000       1.00000       1.00000       1.00000       1.00000    
   1.00000       1.00000       1.00000    
  LEVEL_WEIGHT:
   1.00000       1.00000       1.00000       1.00000       1.00000    
   1.00000       1.00000       1.00000    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN    -6.00000       0   0   0   0   0   0   0   0
   MAX     2.00000       2   2   2   2   2   2   2   2
  TIME    0.193000E-03
 
  SGMGA_VCN:
     I       Q           X
   MIN    -6.00000       0   0   0   0   0   0   0   0
   MAX     2.00000       2   2   2   2   2   2   2   2
  TIME    0.800000E-05
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we compare the timings.
 
  IMPORTANCE:
   1.00000       2.00000       3.00000       4.00000    
  LEVEL_WEIGHT:
   1.00000      0.500000      0.333333      0.250000    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN   -0.833333E-01   0   0   0   0
   MAX     2.00000       2   4   6   8
  TIME    0.180000E-04
 
  SGMGA_VCN:
     I       Q           X
   MIN   -0.833333E-01   0   0   0   0
   MAX     2.00000       2   4   6   8
  TIME    0.900000E-05
 
SGMGA_VCN_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_1D_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept vectors for which Q_MIN < Q <= Q_MAX
  No particular order is imposed on the LEVEL_1D values.
  SGMGA_VCN_NAIVE uses a naive approach;
  SGMGA_VCN tries to be more efficient.
  Here, we compare the timings.
 
  IMPORTANCE:
   1.00000       2.00000       3.00000       4.00000       5.00000    
   6.00000       7.00000       8.00000    
  LEVEL_WEIGHT:
   1.00000      0.500000      0.333333      0.250000      0.200000    
  0.166667      0.142857      0.125000    
 
  SGMGA_VCN_NAIVE:
     I       Q           X
   MIN   -0.717857       0   0   0   0   0   0   0   0
   MAX     2.00000       2   4   6   8  10  12  14  16
  TIME    0.928491    
 
  SGMGA_VCN:
     I       Q           X
   MIN   -0.717857       0   0   0   0   0   0   0   0
   MAX     2.00000       2   4   6   8  10  12  14  16
  TIME    0.193400E-02
 
SGMGA_VCN_ORDERED_TESTS
  calls SGMGA_VCN_ORDERED_TEST.
 
SGMGA_VCN_ORDERED_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept only vectors for which Q_MIN < Q <= Q_MAX
  The solutions are weakly ordered by the value of Q.
  SGMGA_VCN_ORDERED_NAIVE calls SGMGA_VCN_NAIVE;
  SGMGA_VCN_ORDERED calls SGMGA_VCN.
 
  IMPORTANCE:
   1.00000       1.00000    
  LEVEL_WEIGHT:
   1.00000       1.00000    
 
  SGMGA_VCN_ORDERED_NAIVE:
     I       Q           X
   MIN    -2.00000       0   0
     1     0.00000       0   0
   MAX     0.00000       1   1
 
  SGMGA_VCN_ORDERED:
     I       Q           X
   MIN    -2.00000       0   0
     1     0.00000       0   0
   MAX     0.00000       1   1
 
SGMGA_VCN_ORDERED_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept only vectors for which Q_MIN < Q <= Q_MAX
  The solutions are weakly ordered by the value of Q.
  SGMGA_VCN_ORDERED_NAIVE calls SGMGA_VCN_NAIVE;
  SGMGA_VCN_ORDERED calls SGMGA_VCN.
 
  IMPORTANCE:
   1.00000       1.00000    
  LEVEL_WEIGHT:
   1.00000       1.00000    
 
  SGMGA_VCN_ORDERED_NAIVE:
     I       Q           X
   MIN    -1.00000       0   0
     1     0.00000       0   0
     2     1.00000       1   0
     3     1.00000       0   1
   MAX     1.00000       2   2
 
  SGMGA_VCN_ORDERED:
     I       Q           X
   MIN    -1.00000       0   0
     1     0.00000       0   0
     2     1.00000       1   0
     3     1.00000       0   1
   MAX     1.00000       2   2
 
SGMGA_VCN_ORDERED_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept only vectors for which Q_MIN < Q <= Q_MAX
  The solutions are weakly ordered by the value of Q.
  SGMGA_VCN_ORDERED_NAIVE calls SGMGA_VCN_NAIVE;
  SGMGA_VCN_ORDERED calls SGMGA_VCN.
 
  IMPORTANCE:
   1.00000       1.00000    
  LEVEL_WEIGHT:
   1.00000       1.00000    
 
  SGMGA_VCN_ORDERED_NAIVE:
     I       Q           X
   MIN     0.00000       0   0
     1     1.00000       1   0
     2     1.00000       0   1
     3     2.00000       2   0
     4     2.00000       1   1
     5     2.00000       0   2
   MAX     2.00000       3   3
 
  SGMGA_VCN_ORDERED:
     I       Q           X
   MIN     0.00000       0   0
     1     1.00000       1   0
     2     1.00000       0   1
     3     2.00000       2   0
     4     2.00000       1   1
     5     2.00000       0   2
   MAX     2.00000       3   3
 
SGMGA_VCN_ORDERED_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept only vectors for which Q_MIN < Q <= Q_MAX
  The solutions are weakly ordered by the value of Q.
  SGMGA_VCN_ORDERED_NAIVE calls SGMGA_VCN_NAIVE;
  SGMGA_VCN_ORDERED calls SGMGA_VCN.
 
  IMPORTANCE:
   1.00000       1.00000    
  LEVEL_WEIGHT:
   1.00000       1.00000    
 
  SGMGA_VCN_ORDERED_NAIVE:
     I       Q           X
   MIN     1.00000       0   0
     1     2.00000       2   0
     2     2.00000       1   1
     3     2.00000       0   2
     4     3.00000       3   0
     5     3.00000       2   1
     6     3.00000       1   2
     7     3.00000       0   3
   MAX     3.00000       4   4
 
  SGMGA_VCN_ORDERED:
     I       Q           X
   MIN     1.00000       0   0
     1     2.00000       2   0
     2     2.00000       1   1
     3     2.00000       0   2
     4     3.00000       3   0
     5     3.00000       2   1
     6     3.00000       1   2
     7     3.00000       0   3
   MAX     3.00000       4   4
 
SGMGA_VCN_ORDERED_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept only vectors for which Q_MIN < Q <= Q_MAX
  The solutions are weakly ordered by the value of Q.
  SGMGA_VCN_ORDERED_NAIVE calls SGMGA_VCN_NAIVE;
  SGMGA_VCN_ORDERED calls SGMGA_VCN.
 
  IMPORTANCE:
   1.00000       1.00000    
  LEVEL_WEIGHT:
   1.00000       1.00000    
 
  SGMGA_VCN_ORDERED_NAIVE:
     I       Q           X
   MIN     2.00000       0   0
     1     3.00000       3   0
     2     3.00000       2   1
     3     3.00000       1   2
     4     3.00000       0   3
     5     4.00000       4   0
     6     4.00000       3   1
     7     4.00000       2   2
     8     4.00000       1   3
     9     4.00000       0   4
   MAX     4.00000       5   5
 
  SGMGA_VCN_ORDERED:
     I       Q           X
   MIN     2.00000       0   0
     1     3.00000       3   0
     2     3.00000       2   1
     3     3.00000       1   2
     4     3.00000       0   3
     5     4.00000       4   0
     6     4.00000       3   1
     7     4.00000       2   2
     8     4.00000       1   3
     9     4.00000       0   4
   MAX     4.00000       5   5
 
SGMGA_VCN_ORDERED_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept only vectors for which Q_MIN < Q <= Q_MAX
  The solutions are weakly ordered by the value of Q.
  SGMGA_VCN_ORDERED_NAIVE calls SGMGA_VCN_NAIVE;
  SGMGA_VCN_ORDERED calls SGMGA_VCN.
 
  IMPORTANCE:
   1.00000       1.00000       1.00000    
  LEVEL_WEIGHT:
   1.00000       1.00000       1.00000    
 
  SGMGA_VCN_ORDERED_NAIVE:
     I       Q           X
   MIN    -3.00000       0   0   0
     1     0.00000       0   0   0
   MAX     0.00000       1   1   1
 
  SGMGA_VCN_ORDERED:
     I       Q           X
   MIN    -3.00000       0   0   0
     1     0.00000       0   0   0
   MAX     0.00000       1   1   1
 
SGMGA_VCN_ORDERED_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept only vectors for which Q_MIN < Q <= Q_MAX
  The solutions are weakly ordered by the value of Q.
  SGMGA_VCN_ORDERED_NAIVE calls SGMGA_VCN_NAIVE;
  SGMGA_VCN_ORDERED calls SGMGA_VCN.
 
  IMPORTANCE:
   1.00000       1.00000       1.00000    
  LEVEL_WEIGHT:
   1.00000       1.00000       1.00000    
 
  SGMGA_VCN_ORDERED_NAIVE:
     I       Q           X
   MIN    -2.00000       0   0   0
     1     0.00000       0   0   0
     2     1.00000       1   0   0
     3     1.00000       0   1   0
     4     1.00000       0   0   1
   MAX     1.00000       2   2   2
 
  SGMGA_VCN_ORDERED:
     I       Q           X
   MIN    -2.00000       0   0   0
     1     0.00000       0   0   0
     2     1.00000       1   0   0
     3     1.00000       0   1   0
     4     1.00000       0   0   1
   MAX     1.00000       2   2   2
 
SGMGA_VCN_ORDERED_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept only vectors for which Q_MIN < Q <= Q_MAX
  The solutions are weakly ordered by the value of Q.
  SGMGA_VCN_ORDERED_NAIVE calls SGMGA_VCN_NAIVE;
  SGMGA_VCN_ORDERED calls SGMGA_VCN.
 
  IMPORTANCE:
   1.00000       1.00000       1.00000    
  LEVEL_WEIGHT:
   1.00000       1.00000       1.00000    
 
  SGMGA_VCN_ORDERED_NAIVE:
     I       Q           X
   MIN    -1.00000       0   0   0
     1     0.00000       0   0   0
     2     1.00000       1   0   0
     3     1.00000       0   1   0
     4     1.00000       0   0   1
     5     2.00000       2   0   0
     6     2.00000       1   1   0
     7     2.00000       0   2   0
     8     2.00000       1   0   1
     9     2.00000       0   1   1
    10     2.00000       0   0   2
   MAX     2.00000       3   3   3
 
  SGMGA_VCN_ORDERED:
     I       Q           X
   MIN    -1.00000       0   0   0
     1     0.00000       0   0   0
     2     1.00000       1   0   0
     3     1.00000       0   1   0
     4     1.00000       0   0   1
     5     2.00000       2   0   0
     6     2.00000       1   1   0
     7     2.00000       0   2   0
     8     2.00000       1   0   1
     9     2.00000       0   1   1
    10     2.00000       0   0   2
   MAX     2.00000       3   3   3
 
SGMGA_VCN_ORDERED_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept only vectors for which Q_MIN < Q <= Q_MAX
  The solutions are weakly ordered by the value of Q.
  SGMGA_VCN_ORDERED_NAIVE calls SGMGA_VCN_NAIVE;
  SGMGA_VCN_ORDERED calls SGMGA_VCN.
 
  IMPORTANCE:
   1.00000       1.00000       1.00000    
  LEVEL_WEIGHT:
   1.00000       1.00000       1.00000    
 
  SGMGA_VCN_ORDERED_NAIVE:
     I       Q           X
   MIN     0.00000       0   0   0
     1     1.00000       1   0   0
     2     1.00000       0   1   0
     3     1.00000       0   0   1
     4     2.00000       2   0   0
     5     2.00000       1   1   0
     6     2.00000       0   2   0
     7     2.00000       1   0   1
     8     2.00000       0   1   1
     9     2.00000       0   0   2
    10     3.00000       3   0   0
    11     3.00000       2   1   0
    12     3.00000       1   2   0
    13     3.00000       0   3   0
    14     3.00000       2   0   1
    15     3.00000       1   1   1
    16     3.00000       0   2   1
    17     3.00000       1   0   2
    18     3.00000       0   1   2
    19     3.00000       0   0   3
   MAX     3.00000       4   4   4
 
  SGMGA_VCN_ORDERED:
     I       Q           X
   MIN     0.00000       0   0   0
     1     1.00000       1   0   0
     2     1.00000       0   1   0
     3     1.00000       0   0   1
     4     2.00000       2   0   0
     5     2.00000       1   1   0
     6     2.00000       0   2   0
     7     2.00000       1   0   1
     8     2.00000       0   1   1
     9     2.00000       0   0   2
    10     3.00000       3   0   0
    11     3.00000       2   1   0
    12     3.00000       1   2   0
    13     3.00000       0   3   0
    14     3.00000       2   0   1
    15     3.00000       1   1   1
    16     3.00000       0   2   1
    17     3.00000       1   0   2
    18     3.00000       0   1   2
    19     3.00000       0   0   3
   MAX     3.00000       4   4   4
 
SGMGA_VCN_ORDERED_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept only vectors for which Q_MIN < Q <= Q_MAX
  The solutions are weakly ordered by the value of Q.
  SGMGA_VCN_ORDERED_NAIVE calls SGMGA_VCN_NAIVE;
  SGMGA_VCN_ORDERED calls SGMGA_VCN.
 
  IMPORTANCE:
   1.00000       1.00000       1.00000    
  LEVEL_WEIGHT:
   1.00000       1.00000       1.00000    
 
  SGMGA_VCN_ORDERED_NAIVE:
     I       Q           X
   MIN     1.00000       0   0   0
     1     2.00000       2   0   0
     2     2.00000       1   1   0
     3     2.00000       0   2   0
     4     2.00000       1   0   1
     5     2.00000       0   1   1
     6     2.00000       0   0   2
     7     3.00000       3   0   0
     8     3.00000       2   1   0
     9     3.00000       1   2   0
    10     3.00000       0   3   0
    11     3.00000       2   0   1
    12     3.00000       1   1   1
    13     3.00000       0   2   1
    14     3.00000       1   0   2
    15     3.00000       0   1   2
    16     3.00000       0   0   3
    17     4.00000       4   0   0
    18     4.00000       3   1   0
    19     4.00000       2   2   0
    20     4.00000       1   3   0
    21     4.00000       0   4   0
    22     4.00000       3   0   1
    23     4.00000       2   1   1
    24     4.00000       1   2   1
    25     4.00000       0   3   1
    26     4.00000       2   0   2
    27     4.00000       1   1   2
    28     4.00000       0   2   2
    29     4.00000       1   0   3
    30     4.00000       0   1   3
    31     4.00000       0   0   4
   MAX     4.00000       5   5   5
 
  SGMGA_VCN_ORDERED:
     I       Q           X
   MIN     1.00000       0   0   0
     1     2.00000       2   0   0
     2     2.00000       1   1   0
     3     2.00000       0   2   0
     4     2.00000       1   0   1
     5     2.00000       0   1   1
     6     2.00000       0   0   2
     7     3.00000       3   0   0
     8     3.00000       2   1   0
     9     3.00000       1   2   0
    10     3.00000       0   3   0
    11     3.00000       2   0   1
    12     3.00000       1   1   1
    13     3.00000       0   2   1
    14     3.00000       1   0   2
    15     3.00000       0   1   2
    16     3.00000       0   0   3
    17     4.00000       4   0   0
    18     4.00000       3   1   0
    19     4.00000       2   2   0
    20     4.00000       1   3   0
    21     4.00000       0   4   0
    22     4.00000       3   0   1
    23     4.00000       2   1   1
    24     4.00000       1   2   1
    25     4.00000       0   3   1
    26     4.00000       2   0   2
    27     4.00000       1   1   2
    28     4.00000       0   2   2
    29     4.00000       1   0   3
    30     4.00000       0   1   3
    31     4.00000       0   0   4
   MAX     4.00000       5   5   5
 
SGMGA_VCN_ORDERED_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept only vectors for which Q_MIN < Q <= Q_MAX
  The solutions are weakly ordered by the value of Q.
  SGMGA_VCN_ORDERED_NAIVE calls SGMGA_VCN_NAIVE;
  SGMGA_VCN_ORDERED calls SGMGA_VCN.
 
  IMPORTANCE:
   1.00000       1.00000       1.00000       1.00000    
  LEVEL_WEIGHT:
   1.00000       1.00000       1.00000       1.00000    
 
  SGMGA_VCN_ORDERED_NAIVE:
     I       Q           X
   MIN    -2.00000       0   0   0   0
     1     0.00000       0   0   0   0
     2     1.00000       1   0   0   0
     3     1.00000       0   1   0   0
     4     1.00000       0   0   1   0
     5     1.00000       0   0   0   1
     6     2.00000       2   0   0   0
     7     2.00000       1   1   0   0
     8     2.00000       0   2   0   0
     9     2.00000       1   0   1   0
    10     2.00000       0   1   1   0
    11     2.00000       0   0   2   0
    12     2.00000       1   0   0   1
    13     2.00000       0   1   0   1
    14     2.00000       0   0   1   1
    15     2.00000       0   0   0   2
   MAX     2.00000       3   3   3   3
 
  SGMGA_VCN_ORDERED:
     I       Q           X
   MIN    -2.00000       0   0   0   0
     1     0.00000       0   0   0   0
     2     1.00000       1   0   0   0
     3     1.00000       0   1   0   0
     4     1.00000       0   0   1   0
     5     1.00000       0   0   0   1
     6     2.00000       2   0   0   0
     7     2.00000       1   1   0   0
     8     2.00000       0   2   0   0
     9     2.00000       1   0   1   0
    10     2.00000       0   1   1   0
    11     2.00000       0   0   2   0
    12     2.00000       1   0   0   1
    13     2.00000       0   1   0   1
    14     2.00000       0   0   1   1
    15     2.00000       0   0   0   2
   MAX     2.00000       3   3   3   3
 
SGMGA_VCN_ORDERED_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept only vectors for which Q_MIN < Q <= Q_MAX
  The solutions are weakly ordered by the value of Q.
  SGMGA_VCN_ORDERED_NAIVE calls SGMGA_VCN_NAIVE;
  SGMGA_VCN_ORDERED calls SGMGA_VCN.
 
  IMPORTANCE:
   1.00000       1.00000       1.00000       1.00000    
  LEVEL_WEIGHT:
   1.00000       1.00000       1.00000       1.00000    
 
  SGMGA_VCN_ORDERED_NAIVE:
     I       Q           X
   MIN    -1.00000       0   0   0   0
     1     0.00000       0   0   0   0
     2     1.00000       1   0   0   0
     3     1.00000       0   1   0   0
     4     1.00000       0   0   1   0
     5     1.00000       0   0   0   1
     6     2.00000       2   0   0   0
     7     2.00000       1   1   0   0
     8     2.00000       0   2   0   0
     9     2.00000       1   0   1   0
    10     2.00000       0   1   1   0
    11     2.00000       0   0   2   0
    12     2.00000       1   0   0   1
    13     2.00000       0   1   0   1
    14     2.00000       0   0   1   1
    15     2.00000       0   0   0   2
    16     3.00000       3   0   0   0
    17     3.00000       2   1   0   0
    18     3.00000       1   2   0   0
    19     3.00000       0   3   0   0
    20     3.00000       2   0   1   0
    21     3.00000       1   1   1   0
    22     3.00000       0   2   1   0
    23     3.00000       1   0   2   0
    24     3.00000       0   1   2   0
    25     3.00000       0   0   3   0
    26     3.00000       2   0   0   1
    27     3.00000       1   1   0   1
    28     3.00000       0   2   0   1
    29     3.00000       1   0   1   1
    30     3.00000       0   1   1   1
    31     3.00000       0   0   2   1
    32     3.00000       1   0   0   2
    33     3.00000       0   1   0   2
    34     3.00000       0   0   1   2
    35     3.00000       0   0   0   3
   MAX     3.00000       4   4   4   4
 
  SGMGA_VCN_ORDERED:
     I       Q           X
   MIN    -1.00000       0   0   0   0
     1     0.00000       0   0   0   0
     2     1.00000       1   0   0   0
     3     1.00000       0   1   0   0
     4     1.00000       0   0   1   0
     5     1.00000       0   0   0   1
     6     2.00000       2   0   0   0
     7     2.00000       1   1   0   0
     8     2.00000       0   2   0   0
     9     2.00000       1   0   1   0
    10     2.00000       0   1   1   0
    11     2.00000       0   0   2   0
    12     2.00000       1   0   0   1
    13     2.00000       0   1   0   1
    14     2.00000       0   0   1   1
    15     2.00000       0   0   0   2
    16     3.00000       3   0   0   0
    17     3.00000       2   1   0   0
    18     3.00000       1   2   0   0
    19     3.00000       0   3   0   0
    20     3.00000       2   0   1   0
    21     3.00000       1   1   1   0
    22     3.00000       0   2   1   0
    23     3.00000       1   0   2   0
    24     3.00000       0   1   2   0
    25     3.00000       0   0   3   0
    26     3.00000       2   0   0   1
    27     3.00000       1   1   0   1
    28     3.00000       0   2   0   1
    29     3.00000       1   0   1   1
    30     3.00000       0   1   1   1
    31     3.00000       0   0   2   1
    32     3.00000       1   0   0   2
    33     3.00000       0   1   0   2
    34     3.00000       0   0   1   2
    35     3.00000       0   0   0   3
   MAX     3.00000       4   4   4   4
 
SGMGA_VCN_ORDERED_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept only vectors for which Q_MIN < Q <= Q_MAX
  The solutions are weakly ordered by the value of Q.
  SGMGA_VCN_ORDERED_NAIVE calls SGMGA_VCN_NAIVE;
  SGMGA_VCN_ORDERED calls SGMGA_VCN.
 
  IMPORTANCE:
   1.00000       2.00000    
  LEVEL_WEIGHT:
   1.00000      0.500000    
 
  SGMGA_VCN_ORDERED_NAIVE:
     I       Q           X
   MIN    -1.50000       0   0
     1     0.00000       0   0
   MAX     0.00000       1   1
 
  SGMGA_VCN_ORDERED:
     I       Q           X
   MIN    -1.50000       0   0
     1     0.00000       0   0
   MAX     0.00000       1   1
 
SGMGA_VCN_ORDERED_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept only vectors for which Q_MIN < Q <= Q_MAX
  The solutions are weakly ordered by the value of Q.
  SGMGA_VCN_ORDERED_NAIVE calls SGMGA_VCN_NAIVE;
  SGMGA_VCN_ORDERED calls SGMGA_VCN.
 
  IMPORTANCE:
   1.00000       2.00000    
  LEVEL_WEIGHT:
   1.00000      0.500000    
 
  SGMGA_VCN_ORDERED_NAIVE:
     I       Q           X
   MIN   -0.500000       0   0
     1     0.00000       0   0
     2    0.500000       0   1
     3     1.00000       1   0
     4     1.00000       0   2
   MAX     1.00000       2   3
 
  SGMGA_VCN_ORDERED:
     I       Q           X
   MIN   -0.500000       0   0
     1     0.00000       0   0
     2    0.500000       0   1
     3     1.00000       1   0
     4     1.00000       0   2
   MAX     1.00000       2   3
 
SGMGA_VCN_ORDERED_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept only vectors for which Q_MIN < Q <= Q_MAX
  The solutions are weakly ordered by the value of Q.
  SGMGA_VCN_ORDERED_NAIVE calls SGMGA_VCN_NAIVE;
  SGMGA_VCN_ORDERED calls SGMGA_VCN.
 
  IMPORTANCE:
   1.00000       2.00000    
  LEVEL_WEIGHT:
   1.00000      0.500000    
 
  SGMGA_VCN_ORDERED_NAIVE:
     I       Q           X
   MIN    0.500000       0   0
     1     1.00000       1   0
     2     1.50000       1   1
     3     1.00000       0   2
     4     1.50000       0   3
     5     2.00000       2   0
     6     2.00000       1   2
     7     2.00000       0   4
   MAX     2.00000       3   5
 
  SGMGA_VCN_ORDERED:
     I       Q           X
   MIN    0.500000       0   0
     1     1.00000       1   0
     2     1.50000       1   1
     3     1.00000       0   2
     4     1.50000       0   3
     5     2.00000       2   0
     6     2.00000       1   2
     7     2.00000       0   4
   MAX     2.00000       3   5
 
SGMGA_VCN_ORDERED_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept only vectors for which Q_MIN < Q <= Q_MAX
  The solutions are weakly ordered by the value of Q.
  SGMGA_VCN_ORDERED_NAIVE calls SGMGA_VCN_NAIVE;
  SGMGA_VCN_ORDERED calls SGMGA_VCN.
 
  IMPORTANCE:
   1.00000       2.00000    
  LEVEL_WEIGHT:
   1.00000      0.500000    
 
  SGMGA_VCN_ORDERED_NAIVE:
     I       Q           X
   MIN     1.50000       0   0
     1     2.00000       2   0
     2     2.50000       2   1
     3     2.00000       1   2
     4     2.50000       1   3
     5     2.00000       0   4
     6     2.50000       0   5
     7     3.00000       3   0
     8     3.00000       2   2
     9     3.00000       1   4
    10     3.00000       0   6
   MAX     3.00000       4   7
 
  SGMGA_VCN_ORDERED:
     I       Q           X
   MIN     1.50000       0   0
     1     2.00000       2   0
     2     2.50000       2   1
     3     2.00000       1   2
     4     2.50000       1   3
     5     2.00000       0   4
     6     2.50000       0   5
     7     3.00000       3   0
     8     3.00000       2   2
     9     3.00000       1   4
    10     3.00000       0   6
   MAX     3.00000       4   7
 
SGMGA_VCN_ORDERED_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept only vectors for which Q_MIN < Q <= Q_MAX
  The solutions are weakly ordered by the value of Q.
  SGMGA_VCN_ORDERED_NAIVE calls SGMGA_VCN_NAIVE;
  SGMGA_VCN_ORDERED calls SGMGA_VCN.
 
  IMPORTANCE:
   1.00000       2.00000    
  LEVEL_WEIGHT:
   1.00000      0.500000    
 
  SGMGA_VCN_ORDERED_NAIVE:
     I       Q           X
   MIN     2.50000       0   0
     1     3.00000       3   0
     2     3.50000       3   1
     3     3.00000       2   2
     4     3.50000       2   3
     5     3.00000       1   4
     6     3.50000       1   5
     7     3.00000       0   6
     8     3.50000       0   7
     9     4.00000       4   0
    10     4.00000       3   2
    11     4.00000       2   4
    12     4.00000       1   6
    13     4.00000       0   8
   MAX     4.00000       5   9
 
  SGMGA_VCN_ORDERED:
     I       Q           X
   MIN     2.50000       0   0
     1     3.00000       3   0
     2     3.50000       3   1
     3     3.00000       2   2
     4     3.50000       2   3
     5     3.00000       1   4
     6     3.50000       1   5
     7     3.00000       0   6
     8     3.50000       0   7
     9     4.00000       4   0
    10     4.00000       3   2
    11     4.00000       2   4
    12     4.00000       1   6
    13     4.00000       0   8
   MAX     4.00000       5   9
 
SGMGA_VCN_ORDERED_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept only vectors for which Q_MIN < Q <= Q_MAX
  The solutions are weakly ordered by the value of Q.
  SGMGA_VCN_ORDERED_NAIVE calls SGMGA_VCN_NAIVE;
  SGMGA_VCN_ORDERED calls SGMGA_VCN.
 
  IMPORTANCE:
   1.00000       2.00000       3.00000    
  LEVEL_WEIGHT:
   1.00000      0.500000      0.333333    
 
  SGMGA_VCN_ORDERED_NAIVE:
     I       Q           X
   MIN    -1.83333       0   0   0
     1     0.00000       0   0   0
   MAX     0.00000       1   1   1
 
  SGMGA_VCN_ORDERED:
     I       Q           X
   MIN    -1.83333       0   0   0
     1     0.00000       0   0   0
   MAX     0.00000       1   1   1
 
SGMGA_VCN_ORDERED_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept only vectors for which Q_MIN < Q <= Q_MAX
  The solutions are weakly ordered by the value of Q.
  SGMGA_VCN_ORDERED_NAIVE calls SGMGA_VCN_NAIVE;
  SGMGA_VCN_ORDERED calls SGMGA_VCN.
 
  IMPORTANCE:
   1.00000       2.00000       3.00000    
  LEVEL_WEIGHT:
   1.00000      0.500000      0.333333    
 
  SGMGA_VCN_ORDERED_NAIVE:
     I       Q           X
   MIN   -0.833333       0   0   0
     1     0.00000       0   0   0
     2     1.00000       1   0   0
     3    0.500000       0   1   0
     4     1.00000       0   2   0
     5    0.333333       0   0   1
     6    0.833333       0   1   1
     7    0.666667       0   0   2
     8     1.00000       0   0   3
   MAX     1.00000       2   3   4
 
  SGMGA_VCN_ORDERED:
     I       Q           X
   MIN   -0.833333       0   0   0
     1     0.00000       0   0   0
     2     1.00000       1   0   0
     3    0.500000       0   1   0
     4     1.00000       0   2   0
     5    0.333333       0   0   1
     6    0.833333       0   1   1
     7    0.666667       0   0   2
     8     1.00000       0   0   3
   MAX     1.00000       2   3   4
 
SGMGA_VCN_ORDERED_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept only vectors for which Q_MIN < Q <= Q_MAX
  The solutions are weakly ordered by the value of Q.
  SGMGA_VCN_ORDERED_NAIVE calls SGMGA_VCN_NAIVE;
  SGMGA_VCN_ORDERED calls SGMGA_VCN.
 
  IMPORTANCE:
   1.00000       2.00000       3.00000    
  LEVEL_WEIGHT:
   1.00000      0.500000      0.333333    
 
  SGMGA_VCN_ORDERED_NAIVE:
     I       Q           X
   MIN    0.166667       0   0   0
     1     1.00000       1   0   0
     2    0.500000       0   1   0
     3     1.00000       0   2   0
     4    0.333333       0   0   1
     5    0.833333       0   1   1
     6    0.666667       0   0   2
     7     1.16667       0   1   2
     8     1.00000       0   0   3
     9     2.00000       2   0   0
    10     1.50000       1   1   0
    11     2.00000       1   2   0
    12     1.50000       0   3   0
    13     2.00000       0   4   0
    14     1.33333       1   0   1
    15     1.83333       1   1   1
    16     1.33333       0   2   1
    17     1.83333       0   3   1
    18     1.66667       1   0   2
    19     1.66667       0   2   2
    20     2.00000       1   0   3
    21     1.50000       0   1   3
    22     2.00000       0   2   3
    23     1.33333       0   0   4
    24     1.83333       0   1   4
    25     1.66667       0   0   5
    26     2.00000       0   0   6
   MAX     2.00000       3   5   7
 
  SGMGA_VCN_ORDERED:
     I       Q           X
   MIN    0.166667       0   0   0
     1     1.00000       1   0   0
     2    0.500000       0   1   0
     3     1.00000       0   2   0
     4    0.333333       0   0   1
     5    0.833333       0   1   1
     6    0.666667       0   0   2
     7     1.16667       0   1   2
     8     1.00000       0   0   3
     9     2.00000       2   0   0
    10     1.50000       1   1   0
    11     2.00000       1   2   0
    12     1.50000       0   3   0
    13     2.00000       0   4   0
    14     1.33333       1   0   1
    15     1.83333       1   1   1
    16     1.33333       0   2   1
    17     1.83333       0   3   1
    18     1.66667       1   0   2
    19     1.66667       0   2   2
    20     2.00000       1   0   3
    21     1.50000       0   1   3
    22     2.00000       0   2   3
    23     1.33333       0   0   4
    24     1.83333       0   1   4
    25     1.66667       0   0   5
    26     2.00000       0   0   6
   MAX     2.00000       3   5   7
 
SGMGA_VCN_ORDERED_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept only vectors for which Q_MIN < Q <= Q_MAX
  The solutions are weakly ordered by the value of Q.
  SGMGA_VCN_ORDERED_NAIVE calls SGMGA_VCN_NAIVE;
  SGMGA_VCN_ORDERED calls SGMGA_VCN.
 
  IMPORTANCE:
   1.00000       2.00000       3.00000    
  LEVEL_WEIGHT:
   1.00000      0.500000      0.333333    
 
  SGMGA_VCN_ORDERED_NAIVE:
     I       Q           X
   MIN     1.16667       0   0   0
     1     2.00000       2   0   0
     2     1.50000       1   1   0
     3     2.00000       1   2   0
     4     1.50000       0   3   0
     5     2.00000       0   4   0
     6     1.33333       1   0   1
     7     1.83333       1   1   1
     8     1.33333       0   2   1
     9     1.83333       0   3   1
    10     1.66667       1   0   2
    11     2.16667       1   1   2
    12     1.66667       0   2   2
    13     2.16667       0   3   2
    14     2.00000       1   0   3
    15     1.50000       0   1   3
    16     2.00000       0   2   3
    17     1.33333       0   0   4
    18     1.83333       0   1   4
    19     1.66667       0   0   5
    20     2.16667       0   1   5
    21     2.00000       0   0   6
    22     3.00000       3   0   0
    23     2.50000       2   1   0
    24     3.00000       2   2   0
    25     2.50000       1   3   0
    26     3.00000       1   4   0
    27     2.50000       0   5   0
    28     3.00000       0   6   0
    29     2.33333       2   0   1
    30     2.83333       2   1   1
    31     2.33333       1   2   1
    32     2.83333       1   3   1
    33     2.33333       0   4   1
    34     2.83333       0   5   1
    35     2.66667       2   0   2
    36     2.66667       1   2   2
    37     2.66667       0   4   2
    38     3.00000       2   0   3
    39     2.50000       1   1   3
    40     3.00000       1   2   3
    41     2.50000       0   3   3
    42     3.00000       0   4   3
    43     2.33333       1   0   4
    44     2.83333       1   1   4
    45     2.33333       0   2   4
    46     2.83333       0   3   4
    47     2.66667       1   0   5
    48     2.66667       0   2   5
    49     3.00000       1   0   6
    50     2.50000       0   1   6
    51     3.00000       0   2   6
    52     2.33333       0   0   7
    53     2.83333       0   1   7
    54     2.66667       0   0   8
    55     3.00000       0   0   9
   MAX     3.00000       4   7  10
 
  SGMGA_VCN_ORDERED:
     I       Q           X
   MIN     1.16667       0   0   0
     1     2.00000       2   0   0
     2     1.50000       1   1   0
     3     2.00000       1   2   0
     4     1.50000       0   3   0
     5     2.00000       0   4   0
     6     1.33333       1   0   1
     7     1.83333       1   1   1
     8     1.33333       0   2   1
     9     1.83333       0   3   1
    10     1.66667       1   0   2
    11     2.16667       1   1   2
    12     1.66667       0   2   2
    13     2.16667       0   3   2
    14     2.00000       1   0   3
    15     1.50000       0   1   3
    16     2.00000       0   2   3
    17     1.33333       0   0   4
    18     1.83333       0   1   4
    19     1.66667       0   0   5
    20     2.16667       0   1   5
    21     2.00000       0   0   6
    22     3.00000       3   0   0
    23     2.50000       2   1   0
    24     3.00000       2   2   0
    25     2.50000       1   3   0
    26     3.00000       1   4   0
    27     2.50000       0   5   0
    28     3.00000       0   6   0
    29     2.33333       2   0   1
    30     2.83333       2   1   1
    31     2.33333       1   2   1
    32     2.83333       1   3   1
    33     2.33333       0   4   1
    34     2.83333       0   5   1
    35     2.66667       2   0   2
    36     2.66667       1   2   2
    37     2.66667       0   4   2
    38     3.00000       2   0   3
    39     2.50000       1   1   3
    40     3.00000       1   2   3
    41     2.50000       0   3   3
    42     3.00000       0   4   3
    43     2.33333       1   0   4
    44     2.83333       1   1   4
    45     2.33333       0   2   4
    46     2.83333       0   3   4
    47     2.66667       1   0   5
    48     2.66667       0   2   5
    49     3.00000       1   0   6
    50     2.50000       0   1   6
    51     3.00000       0   2   6
    52     2.33333       0   0   7
    53     2.83333       0   1   7
    54     2.66667       0   0   8
    55     3.00000       0   0   9
   MAX     3.00000       4   7  10
 
SGMGA_VCN_ORDERED_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept only vectors for which Q_MIN < Q <= Q_MAX
  The solutions are weakly ordered by the value of Q.
  SGMGA_VCN_ORDERED_NAIVE calls SGMGA_VCN_NAIVE;
  SGMGA_VCN_ORDERED calls SGMGA_VCN.
 
  IMPORTANCE:
   1.00000       2.00000       3.00000    
  LEVEL_WEIGHT:
   1.00000      0.500000      0.333333    
 
  SGMGA_VCN_ORDERED_NAIVE:
     I       Q           X
   MIN     2.16667       0   0   0
     1     3.00000       3   0   0
     2     2.50000       2   1   0
     3     3.00000       2   2   0
     4     2.50000       1   3   0
     5     3.00000       1   4   0
     6     2.50000       0   5   0
     7     3.00000       0   6   0
     8     2.33333       2   0   1
     9     2.83333       2   1   1
    10     2.33333       1   2   1
    11     2.83333       1   3   1
    12     2.33333       0   4   1
    13     2.83333       0   5   1
    14     2.66667       2   0   2
    15     3.16667       2   1   2
    16     2.66667       1   2   2
    17     3.16667       1   3   2
    18     2.66667       0   4   2
    19     3.16667       0   5   2
    20     3.00000       2   0   3
    21     2.50000       1   1   3
    22     3.00000       1   2   3
    23     2.50000       0   3   3
    24     3.00000       0   4   3
    25     2.33333       1   0   4
    26     2.83333       1   1   4
    27     2.33333       0   2   4
    28     2.83333       0   3   4
    29     2.66667       1   0   5
    30     3.16667       1   1   5
    31     2.66667       0   2   5
    32     3.16667       0   3   5
    33     3.00000       1   0   6
    34     2.50000       0   1   6
    35     3.00000       0   2   6
    36     2.33333       0   0   7
    37     2.83333       0   1   7
    38     2.66667       0   0   8
    39     3.16667       0   1   8
    40     3.00000       0   0   9
    41     4.00000       4   0   0
    42     3.50000       3   1   0
    43     4.00000       3   2   0
    44     3.50000       2   3   0
    45     4.00000       2   4   0
    46     3.50000       1   5   0
    47     4.00000       1   6   0
    48     3.50000       0   7   0
    49     4.00000       0   8   0
    50     3.33333       3   0   1
    51     3.83333       3   1   1
    52     3.33333       2   2   1
    53     3.83333       2   3   1
    54     3.33333       1   4   1
    55     3.83333       1   5   1
    56     3.33333       0   6   1
    57     3.83333       0   7   1
    58     3.66667       3   0   2
    59     3.66667       2   2   2
    60     3.66667       1   4   2
    61     3.66667       0   6   2
    62     4.00000       3   0   3
    63     3.50000       2   1   3
    64     4.00000       2   2   3
    65     3.50000       1   3   3
    66     4.00000       1   4   3
    67     3.50000       0   5   3
    68     4.00000       0   6   3
    69     3.33333       2   0   4
    70     3.83333       2   1   4
    71     3.33333       1   2   4
    72     3.83333       1   3   4
    73     3.33333       0   4   4
    74     3.83333       0   5   4
    75     3.66667       2   0   5
    76     3.66667       1   2   5
    77     3.66667       0   4   5
    78     4.00000       2   0   6
    79     3.50000       1   1   6
    80     4.00000       1   2   6
    81     3.50000       0   3   6
    82     4.00000       0   4   6
    83     3.33333       1   0   7
    84     3.83333       1   1   7
    85     3.33333       0   2   7
    86     3.83333       0   3   7
    87     3.66667       1   0   8
    88     3.66667       0   2   8
    89     4.00000       1   0   9
    90     3.50000       0   1   9
    91     4.00000       0   2   9
    92     3.33333       0   0  10
    93     3.83333       0   1  10
    94     3.66667       0   0  11
    95     4.00000       0   0  12
   MAX     4.00000       5   9  13
 
  SGMGA_VCN_ORDERED:
     I       Q           X
   MIN     2.16667       0   0   0
     1     3.00000       3   0   0
     2     2.50000       2   1   0
     3     3.00000       2   2   0
     4     2.50000       1   3   0
     5     3.00000       1   4   0
     6     2.50000       0   5   0
     7     3.00000       0   6   0
     8     2.33333       2   0   1
     9     2.83333       2   1   1
    10     2.33333       1   2   1
    11     2.83333       1   3   1
    12     2.33333       0   4   1
    13     2.83333       0   5   1
    14     2.66667       2   0   2
    15     3.16667       2   1   2
    16     2.66667       1   2   2
    17     3.16667       1   3   2
    18     2.66667       0   4   2
    19     3.16667       0   5   2
    20     3.00000       2   0   3
    21     2.50000       1   1   3
    22     3.00000       1   2   3
    23     2.50000       0   3   3
    24     3.00000       0   4   3
    25     2.33333       1   0   4
    26     2.83333       1   1   4
    27     2.33333       0   2   4
    28     2.83333       0   3   4
    29     2.66667       1   0   5
    30     3.16667       1   1   5
    31     2.66667       0   2   5
    32     3.16667       0   3   5
    33     3.00000       1   0   6
    34     2.50000       0   1   6
    35     3.00000       0   2   6
    36     2.33333       0   0   7
    37     2.83333       0   1   7
    38     2.66667       0   0   8
    39     3.16667       0   1   8
    40     3.00000       0   0   9
    41     4.00000       4   0   0
    42     3.50000       3   1   0
    43     4.00000       3   2   0
    44     3.50000       2   3   0
    45     4.00000       2   4   0
    46     3.50000       1   5   0
    47     4.00000       1   6   0
    48     3.50000       0   7   0
    49     4.00000       0   8   0
    50     3.33333       3   0   1
    51     3.83333       3   1   1
    52     3.33333       2   2   1
    53     3.83333       2   3   1
    54     3.33333       1   4   1
    55     3.83333       1   5   1
    56     3.33333       0   6   1
    57     3.83333       0   7   1
    58     3.66667       3   0   2
    59     3.66667       2   2   2
    60     3.66667       1   4   2
    61     3.66667       0   6   2
    62     4.00000       3   0   3
    63     3.50000       2   1   3
    64     4.00000       2   2   3
    65     3.50000       1   3   3
    66     4.00000       1   4   3
    67     3.50000       0   5   3
    68     4.00000       0   6   3
    69     3.33333       2   0   4
    70     3.83333       2   1   4
    71     3.33333       1   2   4
    72     3.83333       1   3   4
    73     3.33333       0   4   4
    74     3.83333       0   5   4
    75     3.66667       2   0   5
    76     3.66667       1   2   5
    77     3.66667       0   4   5
    78     4.00000       2   0   6
    79     3.50000       1   1   6
    80     4.00000       1   2   6
    81     3.50000       0   3   6
    82     4.00000       0   4   6
    83     3.33333       1   0   7
    84     3.83333       1   1   7
    85     3.33333       0   2   7
    86     3.83333       0   3   7
    87     3.66667       1   0   8
    88     3.66667       0   2   8
    89     4.00000       1   0   9
    90     3.50000       0   1   9
    91     4.00000       0   2   9
    92     3.33333       0   0  10
    93     3.83333       0   1  10
    94     3.66667       0   0  11
    95     4.00000       0   0  12
   MAX     4.00000       5   9  13
 
SGMGA_VCN_ORDERED_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept only vectors for which Q_MIN < Q <= Q_MAX
  The solutions are weakly ordered by the value of Q.
  SGMGA_VCN_ORDERED_NAIVE calls SGMGA_VCN_NAIVE;
  SGMGA_VCN_ORDERED calls SGMGA_VCN.
 
  IMPORTANCE:
   1.00000       2.00000       3.00000       4.00000    
  LEVEL_WEIGHT:
   1.00000      0.500000      0.333333      0.250000    
 
  SGMGA_VCN_ORDERED_NAIVE:
     I       Q           X
   MIN   -0.833333E-01   0   0   0   0
     1     0.00000       0   0   0   0
     2    0.500000       0   1   0   0
     3    0.333333       0   0   1   0
     4    0.833333       0   1   1   0
     5    0.666667       0   0   2   0
     6    0.250000       0   0   0   1
     7    0.750000       0   1   0   1
     8    0.583333       0   0   1   1
     9    0.916667       0   0   2   1
    10    0.500000       0   0   0   2
    11    0.833333       0   0   1   2
    12    0.750000       0   0   0   3
    13     1.00000       1   0   0   0
    14     1.50000       1   1   0   0
    15     1.00000       0   2   0   0
    16     1.50000       0   3   0   0
    17     1.33333       1   0   1   0
    18     1.83333       1   1   1   0
    19     1.33333       0   2   1   0
    20     1.83333       0   3   1   0
    21     1.66667       1   0   2   0
    22     1.16667       0   1   2   0
    23     1.66667       0   2   2   0
    24     1.00000       0   0   3   0
    25     1.50000       0   1   3   0
    26     1.33333       0   0   4   0
    27     1.83333       0   1   4   0
    28     1.66667       0   0   5   0
    29     1.25000       1   0   0   1
    30     1.75000       1   1   0   1
    31     1.25000       0   2   0   1
    32     1.75000       0   3   0   1
    33     1.58333       1   0   1   1
    34     1.08333       0   1   1   1
    35     1.58333       0   2   1   1
    36     1.91667       1   0   2   1
    37     1.41667       0   1   2   1
    38     1.91667       0   2   2   1
    39     1.25000       0   0   3   1
    40     1.75000       0   1   3   1
    41     1.58333       0   0   4   1
    42     1.91667       0   0   5   1
    43     1.50000       1   0   0   2
    44     1.00000       0   1   0   2
    45     1.50000       0   2   0   2
    46     1.83333       1   0   1   2
    47     1.33333       0   1   1   2
    48     1.83333       0   2   1   2
    49     1.16667       0   0   2   2
    50     1.66667       0   1   2   2
    51     1.50000       0   0   3   2
    52     1.83333       0   0   4   2
    53     1.75000       1   0   0   3
    54     1.25000       0   1   0   3
    55     1.75000       0   2   0   3
    56     1.08333       0   0   1   3
    57     1.58333       0   1   1   3
    58     1.41667       0   0   2   3
    59     1.91667       0   1   2   3
    60     1.75000       0   0   3   3
    61     1.00000       0   0   0   4
    62     1.50000       0   1   0   4
    63     1.33333       0   0   1   4
    64     1.83333       0   1   1   4
    65     1.66667       0   0   2   4
    66     1.25000       0   0   0   5
    67     1.75000       0   1   0   5
    68     1.58333       0   0   1   5
    69     1.91667       0   0   2   5
    70     1.50000       0   0   0   6
    71     1.83333       0   0   1   6
    72     1.75000       0   0   0   7
    73     2.00000       2   0   0   0
    74     2.00000       1   2   0   0
    75     2.00000       0   4   0   0
    76     2.00000       1   0   3   0
    77     2.00000       0   2   3   0
    78     2.00000       0   0   6   0
    79     2.00000       1   1   0   2
    80     2.00000       0   3   0   2
    81     2.00000       0   1   3   2
    82     2.00000       1   0   0   4
    83     2.00000       0   2   0   4
    84     2.00000       0   0   3   4
    85     2.00000       0   1   0   6
    86     2.00000       0   0   0   8
   MAX     2.00000       3   5   7   9
 
  SGMGA_VCN_ORDERED:
     I       Q           X
   MIN   -0.833333E-01   0   0   0   0
     1     0.00000       0   0   0   0
     2    0.500000       0   1   0   0
     3    0.333333       0   0   1   0
     4    0.833333       0   1   1   0
     5    0.666667       0   0   2   0
     6    0.250000       0   0   0   1
     7    0.750000       0   1   0   1
     8    0.583333       0   0   1   1
     9    0.916667       0   0   2   1
    10    0.500000       0   0   0   2
    11    0.833333       0   0   1   2
    12    0.750000       0   0   0   3
    13     1.00000       1   0   0   0
    14     1.50000       1   1   0   0
    15     1.00000       0   2   0   0
    16     1.50000       0   3   0   0
    17     1.33333       1   0   1   0
    18     1.83333       1   1   1   0
    19     1.33333       0   2   1   0
    20     1.83333       0   3   1   0
    21     1.66667       1   0   2   0
    22     1.16667       0   1   2   0
    23     1.66667       0   2   2   0
    24     1.00000       0   0   3   0
    25     1.50000       0   1   3   0
    26     1.33333       0   0   4   0
    27     1.83333       0   1   4   0
    28     1.66667       0   0   5   0
    29     1.25000       1   0   0   1
    30     1.75000       1   1   0   1
    31     1.25000       0   2   0   1
    32     1.75000       0   3   0   1
    33     1.58333       1   0   1   1
    34     1.08333       0   1   1   1
    35     1.58333       0   2   1   1
    36     1.91667       1   0   2   1
    37     1.41667       0   1   2   1
    38     1.91667       0   2   2   1
    39     1.25000       0   0   3   1
    40     1.75000       0   1   3   1
    41     1.58333       0   0   4   1
    42     1.91667       0   0   5   1
    43     1.50000       1   0   0   2
    44     1.00000       0   1   0   2
    45     1.50000       0   2   0   2
    46     1.83333       1   0   1   2
    47     1.33333       0   1   1   2
    48     1.83333       0   2   1   2
    49     1.16667       0   0   2   2
    50     1.66667       0   1   2   2
    51     1.50000       0   0   3   2
    52     1.83333       0   0   4   2
    53     1.75000       1   0   0   3
    54     1.25000       0   1   0   3
    55     1.75000       0   2   0   3
    56     1.08333       0   0   1   3
    57     1.58333       0   1   1   3
    58     1.41667       0   0   2   3
    59     1.91667       0   1   2   3
    60     1.75000       0   0   3   3
    61     1.00000       0   0   0   4
    62     1.50000       0   1   0   4
    63     1.33333       0   0   1   4
    64     1.83333       0   1   1   4
    65     1.66667       0   0   2   4
    66     1.25000       0   0   0   5
    67     1.75000       0   1   0   5
    68     1.58333       0   0   1   5
    69     1.91667       0   0   2   5
    70     1.50000       0   0   0   6
    71     1.83333       0   0   1   6
    72     1.75000       0   0   0   7
    73     2.00000       2   0   0   0
    74     2.00000       1   2   0   0
    75     2.00000       0   4   0   0
    76     2.00000       1   0   3   0
    77     2.00000       0   2   3   0
    78     2.00000       0   0   6   0
    79     2.00000       1   1   0   2
    80     2.00000       0   3   0   2
    81     2.00000       0   1   3   2
    82     2.00000       1   0   0   4
    83     2.00000       0   2   0   4
    84     2.00000       0   0   3   4
    85     2.00000       0   1   0   6
    86     2.00000       0   0   0   8
   MAX     2.00000       3   5   7   9
 
SGMGA_VCN_ORDERED_TEST
  Consider vectors 0 <= LEVEL_1D(1:N) <= LEVEL_1D_MAX(1:N),
  Set Q = sum ( LEVEL_WEIGHT(1:N) * LEVEL_1D(1:N) )
  Accept only vectors for which Q_MIN < Q <= Q_MAX
  The solutions are weakly ordered by the value of Q.
  SGMGA_VCN_ORDERED_NAIVE calls SGMGA_VCN_NAIVE;
  SGMGA_VCN_ORDERED calls SGMGA_VCN.
 
  IMPORTANCE:
   1.00000       2.00000       3.00000       4.00000    
  LEVEL_WEIGHT:
   1.00000      0.500000      0.333333      0.250000    
 
  SGMGA_VCN_ORDERED_NAIVE:
     I       Q           X
   MIN    0.916667       0   0   0   0
     1     1.00000       1   0   0   0
     2     1.50000       1   1   0   0
     3     1.00000       0   2   0   0
     4     1.50000       0   3   0   0
     5     1.33333       1   0   1   0
     6     1.83333       1   1   1   0
     7     1.33333       0   2   1   0
     8     1.83333       0   3   1   0
     9     1.66667       1   0   2   0
    10     1.16667       0   1   2   0
    11     1.66667       0   2   2   0
    12     1.00000       0   0   3   0
    13     1.50000       0   1   3   0
    14     1.33333       0   0   4   0
    15     1.83333       0   1   4   0
    16     1.66667       0   0   5   0
    17     1.25000       1   0   0   1
    18     1.75000       1   1   0   1
    19     1.25000       0   2   0   1
    20     1.75000       0   3   0   1
    21     1.58333       1   0   1   1
    22     1.08333       0   1   1   1
    23     1.58333       0   2   1   1
    24     1.91667       1   0   2   1
    25     1.41667       0   1   2   1
    26     1.91667       0   2   2   1
    27     1.25000       0   0   3   1
    28     1.75000       0   1   3   1
    29     1.58333       0   0   4   1
    30     1.91667       0   0   5   1
    31     1.50000       1   0   0   2
    32     1.00000       0   1   0   2
    33     1.50000       0   2   0   2
    34     1.83333       1   0   1   2
    35     1.33333       0   1   1   2
    36     1.83333       0   2   1   2
    37     1.16667       0   0   2   2
    38     1.66667       0   1   2   2
    39     1.50000       0   0   3   2
    40     1.83333       0   0   4   2
    41     1.75000       1   0   0   3
    42     1.25000       0   1   0   3
    43     1.75000       0   2   0   3
    44     1.08333       0   0   1   3
    45     1.58333       0   1   1   3
    46     1.41667       0   0   2   3
    47     1.91667       0   1   2   3
    48     1.75000       0   0   3   3
    49     1.00000       0   0   0   4
    50     1.50000       0   1   0   4
    51     1.33333       0   0   1   4
    52     1.83333       0   1   1   4
    53     1.66667       0   0   2   4
    54     1.25000       0   0   0   5
    55     1.75000       0   1   0   5
    56     1.58333       0   0   1   5
    57     1.91667       0   0   2   5
    58     1.50000       0   0   0   6
    59     1.83333       0   0   1   6
    60     1.75000       0   0   0   7
    61     2.00000       2   0   0   0
    62     2.50000       2   1   0   0
    63     2.00000       1   2   0   0
    64     2.50000       1   3   0   0
    65     2.00000       0   4   0   0
    66     2.50000       0   5   0   0
    67     2.33333       2   0   1   0
    68     2.83333       2   1   1   0
    69     2.33333       1   2   1   0
    70     2.83333       1   3   1   0
    71     2.33333       0   4   1   0
    72     2.83333       0   5   1   0
    73     2.66667       2   0   2   0
    74     2.16667       1   1   2   0
    75     2.66667       1   2   2   0
    76     2.16667       0   3   2   0
    77     2.66667       0   4   2   0
    78     2.00000       1   0   3   0
    79     2.50000       1   1   3   0
    80     2.00000       0   2   3   0
    81     2.50000       0   3   3   0
    82     2.33333       1   0   4   0
    83     2.83333       1   1   4   0
    84     2.33333       0   2   4   0
    85     2.83333       0   3   4   0
    86     2.66667       1   0   5   0
    87     2.16667       0   1   5   0
    88     2.66667       0   2   5   0
    89     2.00000       0   0   6   0
    90     2.50000       0   1   6   0
    91     2.33333       0   0   7   0
    92     2.83333       0   1   7   0
    93     2.66667       0   0   8   0
    94     2.25000       2   0   0   1
    95     2.75000       2   1   0   1
    96     2.25000       1   2   0   1
    97     2.75000       1   3   0   1
    98     2.25000       0   4   0   1
    99     2.75000       0   5   0   1
   100     2.58333       2   0   1   1
   101     2.08333       1   1   1   1
   102     2.58333       1   2   1   1
   103     2.08333       0   3   1   1
   104     2.58333       0   4   1   1
   105     2.91667       2   0   2   1
   106     2.41667       1   1   2   1
   107     2.91667       1   2   2   1
   108     2.41667       0   3   2   1
   109     2.91667       0   4   2   1
   110     2.25000       1   0   3   1
   111     2.75000       1   1   3   1
   112     2.25000       0   2   3   1
   113     2.75000       0   3   3   1
   114     2.58333       1   0   4   1
   115     2.08333       0   1   4   1
   116     2.58333       0   2   4   1
   117     2.91667       1   0   5   1
   118     2.41667       0   1   5   1
   119     2.91667       0   2   5   1
   120     2.25000       0   0   6   1
   121     2.75000       0   1   6   1
   122     2.58333       0   0   7   1
   123     2.91667       0   0   8   1
   124     2.50000       2   0   0   2
   125     2.00000       1   1   0   2
   126     2.50000       1   2   0   2
   127     2.00000       0   3   0   2
   128     2.50000       0   4   0   2
   129     2.83333       2   0   1   2
   130     2.33333       1   1   1   2
   131     2.83333       1   2   1   2
   132     2.33333       0   3   1   2
   133     2.83333       0   4   1   2
   134     2.16667       1   0   2   2
   135     2.66667       1   1   2   2
   136     2.16667       0   2   2   2
   137     2.66667       0   3   2   2
   138     2.50000       1   0   3   2
   139     2.00000       0   1   3   2
   140     2.50000       0   2   3   2
   141     2.83333       1   0   4   2
   142     2.33333       0   1   4   2
   143     2.83333       0   2   4   2
   144     2.16667       0   0   5   2
   145     2.66667       0   1   5   2
   146     2.50000       0   0   6   2
   147     2.83333       0   0   7   2
   148     2.75000       2   0   0   3
   149     2.25000       1   1   0   3
   150     2.75000       1   2   0   3
   151     2.25000       0   3   0   3
   152     2.75000       0   4   0   3
   153     2.08333       1   0   1   3
   154     2.58333       1   1   1   3
   155     2.08333       0   2   1   3
   156     2.58333       0   3   1   3
   157     2.41667       1   0   2   3
   158     2.91667       1   1   2   3
   159     2.41667       0   2   2   3
   160     2.91667       0   3   2   3
   161     2.75000       1   0   3   3
   162     2.25000       0   1   3   3
   163     2.75000       0   2   3   3
   164     2.08333       0   0   4   3
   165     2.58333       0   1   4   3
   166     2.41667       0   0   5   3
   167     2.91667       0   1   5   3
   168     2.75000       0   0   6   3
   169     2.00000       1   0   0   4
   170     2.50000       1   1   0   4
   171     2.00000       0   2   0   4
   172     2.50000       0   3   0   4
   173     2.33333       1   0   1   4
   174     2.83333       1   1   1   4
   175     2.33333       0   2   1   4
   176     2.83333       0   3   1   4
   177     2.66667       1   0   2   4
   178     2.16667       0   1   2   4
   179     2.66667       0   2   2   4
   180     2.00000       0   0   3   4
   181     2.50000       0   1   3   4
   182     2.33333       0   0   4   4
   183     2.83333       0   1   4   4
   184     2.66667       0   0   5   4
   185     2.25000       1   0   0   5
   186     2.75000       1   1   0   5
   187     2.25000       0   2   0   5
   188     2.75000       0   3   0   5
   189     2.58333       1   0   1   5
   190     2.08333       0   1   1   5
   191     2.58333       0   2   1   5
   192     2.91667       1   0   2   5
   193     2.41667       0   1   2   5
   194     2.91667       0   2   2   5
   195     2.25000       0   0   3   5
   196     2.75000       0   1   3   5
   197     2.58333       0   0   4   5
   198     2.91667       0   0   5   5
   199     2.50000       1   0   0   6
   200     2.00000       0   1   0   6
   201     2.50000       0   2   0   6
   202     2.83333       1   0   1   6
   203     2.33333       0   1   1   6
   204     2.83333       0   2   1   6
   205     2.16667       0   0   2   6
   206     2.66667       0   1   2   6
   207     2.50000       0   0   3   6
   208     2.83333       0   0   4   6
   209     2.75000       1   0   0   7
   210     2.25000       0   1   0   7
   211     2.75000       0   2   0   7
   212     2.08333       0   0   1   7
   213     2.58333       0   1   1   7
   214     2.41667       0   0   2   7
   215     2.91667       0   1   2   7
   216     2.75000       0   0   3   7
   217     2.00000       0   0   0   8
   218     2.50000       0   1   0   8
   219     2.33333       0   0   1   8
   220     2.83333       0   1   1   8
   221     2.66667       0   0   2   8
   222     2.25000       0   0   0   9
   223     2.75000       0   1   0   9
   224     2.58333       0   0   1   9
   225     2.91667       0   0   2   9
   226     2.50000       0   0   0  10
   227     2.83333       0   0   1  10
   228     2.75000       0   0   0  11
   229     3.00000       3   0   0   0
   230     3.00000       2   2   0   0
   231     3.00000       1   4   0   0
   232     3.00000       0   6   0   0
   233     3.00000       2   0   3   0
   234     3.00000       1   2   3   0
   235     3.00000       0   4   3   0
   236     3.00000       1   0   6   0
   237     3.00000       0   2   6   0
   238     3.00000       0   0   9   0
   239     3.00000       2   1   0   2
   240     3.00000       1   3   0   2
   241     3.00000       0   5   0   2
   242     3.00000       1   1   3   2
   243     3.00000       0   3   3   2
   244     3.00000       0   1   6   2
   245     3.00000       2   0   0   4
   246     3.00000       1   2   0   4
   247     3.00000       0   4   0   4
   248     3.00000       1   0   3   4
   249     3.00000       0   2   3   4
   250     3.00000       0   0   6   4
   251     3.00000       1   1   0   6
   252     3.00000       0   3   0   6
   253     3.00000       0   1   3   6
   254     3.00000       1   0   0   8
   255     3.00000       0   2   0   8
   256     3.00000       0   0   3   8
   257     3.00000       0   1   0  10
   258     3.00000       0   0   0  12
   MAX     3.00000       4   7  10  13
 
  SGMGA_VCN_ORDERED:
     I       Q           X
   MIN    0.916667       0   0   0   0
     1     1.00000       1   0   0   0
     2     1.50000       1   1   0   0
     3     1.00000       0   2   0   0
     4     1.50000       0   3   0   0
     5     1.33333       1   0   1   0
     6     1.83333       1   1   1   0
     7     1.33333       0   2   1   0
     8     1.83333       0   3   1   0
     9     1.66667       1   0   2   0
    10     1.16667       0   1   2   0
    11     1.66667       0   2   2   0
    12     1.00000       0   0   3   0
    13     1.50000       0   1   3   0
    14     1.33333       0   0   4   0
    15     1.83333       0   1   4   0
    16     1.66667       0   0   5   0
    17     1.25000       1   0   0   1
    18     1.75000       1   1   0   1
    19     1.25000       0   2   0   1
    20     1.75000       0   3   0   1
    21     1.58333       1   0   1   1
    22     1.08333       0   1   1   1
    23     1.58333       0   2   1   1
    24     1.91667       1   0   2   1
    25     1.41667       0   1   2   1
    26     1.91667       0   2   2   1
    27     1.25000       0   0   3   1
    28     1.75000       0   1   3   1
    29     1.58333       0   0   4   1
    30     1.91667       0   0   5   1
    31     1.50000       1   0   0   2
    32     1.00000       0   1   0   2
    33     1.50000       0   2   0   2
    34     1.83333       1   0   1   2
    35     1.33333       0   1   1   2
    36     1.83333       0   2   1   2
    37     1.16667       0   0   2   2
    38     1.66667       0   1   2   2
    39     1.50000       0   0   3   2
    40     1.83333       0   0   4   2
    41     1.75000       1   0   0   3
    42     1.25000       0   1   0   3
    43     1.75000       0   2   0   3
    44     1.08333       0   0   1   3
    45     1.58333       0   1   1   3
    46     1.41667       0   0   2   3
    47     1.91667       0   1   2   3
    48     1.75000       0   0   3   3
    49     1.00000       0   0   0   4
    50     1.50000       0   1   0   4
    51     1.33333       0   0   1   4
    52     1.83333       0   1   1   4
    53     1.66667       0   0   2   4
    54     1.25000       0   0   0   5
    55     1.75000       0   1   0   5
    56     1.58333       0   0   1   5
    57     1.91667       0   0   2   5
    58     1.50000       0   0   0   6
    59     1.83333       0   0   1   6
    60     1.75000       0   0   0   7
    61     2.00000       2   0   0   0
    62     2.50000       2   1   0   0
    63     2.00000       1   2   0   0
    64     2.50000       1   3   0   0
    65     2.00000       0   4   0   0
    66     2.50000       0   5   0   0
    67     2.33333       2   0   1   0
    68     2.83333       2   1   1   0
    69     2.33333       1   2   1   0
    70     2.83333       1   3   1   0
    71     2.33333       0   4   1   0
    72     2.83333       0   5   1   0
    73     2.66667       2   0   2   0
    74     2.16667       1   1   2   0
    75     2.66667       1   2   2   0
    76     2.16667       0   3   2   0
    77     2.66667       0   4   2   0
    78     2.00000       1   0   3   0
    79     2.50000       1   1   3   0
    80     2.00000       0   2   3   0
    81     2.50000       0   3   3   0
    82     2.33333       1   0   4   0
    83     2.83333       1   1   4   0
    84     2.33333       0   2   4   0
    85     2.83333       0   3   4   0
    86     2.66667       1   0   5   0
    87     2.16667       0   1   5   0
    88     2.66667       0   2   5   0
    89     2.00000       0   0   6   0
    90     2.50000       0   1   6   0
    91     2.33333       0   0   7   0
    92     2.83333       0   1   7   0
    93     2.66667       0   0   8   0
    94     2.25000       2   0   0   1
    95     2.75000       2   1   0   1
    96     2.25000       1   2   0   1
    97     2.75000       1   3   0   1
    98     2.25000       0   4   0   1
    99     2.75000       0   5   0   1
   100     2.58333       2   0   1   1
   101     2.08333       1   1   1   1
   102     2.58333       1   2   1   1
   103     2.08333       0   3   1   1
   104     2.58333       0   4   1   1
   105     2.91667       2   0   2   1
   106     2.41667       1   1   2   1
   107     2.91667       1   2   2   1
   108     2.41667       0   3   2   1
   109     2.91667       0   4   2   1
   110     2.25000       1   0   3   1
   111     2.75000       1   1   3   1
   112     2.25000       0   2   3   1
   113     2.75000       0   3   3   1
   114     2.58333       1   0   4   1
   115     2.08333       0   1   4   1
   116     2.58333       0   2   4   1
   117     2.91667       1   0   5   1
   118     2.41667       0   1   5   1
   119     2.91667       0   2   5   1
   120     2.25000       0   0   6   1
   121     2.75000       0   1   6   1
   122     2.58333       0   0   7   1
   123     2.91667       0   0   8   1
   124     2.50000       2   0   0   2
   125     2.00000       1   1   0   2
   126     2.50000       1   2   0   2
   127     2.00000       0   3   0   2
   128     2.50000       0   4   0   2
   129     2.83333       2   0   1   2
   130     2.33333       1   1   1   2
   131     2.83333       1   2   1   2
   132     2.33333       0   3   1   2
   133     2.83333       0   4   1   2
   134     2.16667       1   0   2   2
   135     2.66667       1   1   2   2
   136     2.16667       0   2   2   2
   137     2.66667       0   3   2   2
   138     2.50000       1   0   3   2
   139     2.00000       0   1   3   2
   140     2.50000       0   2   3   2
   141     2.83333       1   0   4   2
   142     2.33333       0   1   4   2
   143     2.83333       0   2   4   2
   144     2.16667       0   0   5   2
   145     2.66667       0   1   5   2
   146     2.50000       0   0   6   2
   147     2.83333       0   0   7   2
   148     2.75000       2   0   0   3
   149     2.25000       1   1   0   3
   150     2.75000       1   2   0   3
   151     2.25000       0   3   0   3
   152     2.75000       0   4   0   3
   153     2.08333       1   0   1   3
   154     2.58333       1   1   1   3
   155     2.08333       0   2   1   3
   156     2.58333       0   3   1   3
   157     2.41667       1   0   2   3
   158     2.91667       1   1   2   3
   159     2.41667       0   2   2   3
   160     2.91667       0   3   2   3
   161     2.75000       1   0   3   3
   162     2.25000       0   1   3   3
   163     2.75000       0   2   3   3
   164     2.08333       0   0   4   3
   165     2.58333       0   1   4   3
   166     2.41667       0   0   5   3
   167     2.91667       0   1   5   3
   168     2.75000       0   0   6   3
   169     2.00000       1   0   0   4
   170     2.50000       1   1   0   4
   171     2.00000       0   2   0   4
   172     2.50000       0   3   0   4
   173     2.33333       1   0   1   4
   174     2.83333       1   1   1   4
   175     2.33333       0   2   1   4
   176     2.83333       0   3   1   4
   177     2.66667       1   0   2   4
   178     2.16667       0   1   2   4
   179     2.66667       0   2   2   4
   180     2.00000       0   0   3   4
   181     2.50000       0   1   3   4
   182     2.33333       0   0   4   4
   183     2.83333       0   1   4   4
   184     2.66667       0   0   5   4
   185     2.25000       1   0   0   5
   186     2.75000       1   1   0   5
   187     2.25000       0   2   0   5
   188     2.75000       0   3   0   5
   189     2.58333       1   0   1   5
   190     2.08333       0   1   1   5
   191     2.58333       0   2   1   5
   192     2.91667       1   0   2   5
   193     2.41667       0   1   2   5
   194     2.91667       0   2   2   5
   195     2.25000       0   0   3   5
   196     2.75000       0   1   3   5
   197     2.58333       0   0   4   5
   198     2.91667       0   0   5   5
   199     2.50000       1   0   0   6
   200     2.00000       0   1   0   6
   201     2.50000       0   2   0   6
   202     2.83333       1   0   1   6
   203     2.33333       0   1   1   6
   204     2.83333       0   2   1   6
   205     2.16667       0   0   2   6
   206     2.66667       0   1   2   6
   207     2.50000       0   0   3   6
   208     2.83333       0   0   4   6
   209     2.75000       1   0   0   7
   210     2.25000       0   1   0   7
   211     2.75000       0   2   0   7
   212     2.08333       0   0   1   7
   213     2.58333       0   1   1   7
   214     2.41667       0   0   2   7
   215     2.91667       0   1   2   7
   216     2.75000       0   0   3   7
   217     2.00000       0   0   0   8
   218     2.50000       0   1   0   8
   219     2.33333       0   0   1   8
   220     2.83333       0   1   1   8
   221     2.66667       0   0   2   8
   222     2.25000       0   0   0   9
   223     2.75000       0   1   0   9
   224     2.58333       0   0   1   9
   225     2.91667       0   0   2   9
   226     2.50000       0   0   0  10
   227     2.83333       0   0   1  10
   228     2.75000       0   0   0  11
   229     3.00000       3   0   0   0
   230     3.00000       2   2   0   0
   231     3.00000       1   4   0   0
   232     3.00000       0   6   0   0
   233     3.00000       2   0   3   0
   234     3.00000       1   2   3   0
   235     3.00000       0   4   3   0
   236     3.00000       1   0   6   0
   237     3.00000       0   2   6   0
   238     3.00000       0   0   9   0
   239     3.00000       2   1   0   2
   240     3.00000       1   3   0   2
   241     3.00000       0   5   0   2
   242     3.00000       1   1   3   2
   243     3.00000       0   3   3   2
   244     3.00000       0   1   6   2
   245     3.00000       2   0   0   4
   246     3.00000       1   2   0   4
   247     3.00000       0   4   0   4
   248     3.00000       1   0   3   4
   249     3.00000       0   2   3   4
   250     3.00000       0   0   6   4
   251     3.00000       1   1   0   6
   252     3.00000       0   3   0   6
   253     3.00000       0   1   3   6
   254     3.00000       1   0   0   8
   255     3.00000       0   2   0   8
   256     3.00000       0   0   3   8
   257     3.00000       0   1   0  10
   258     3.00000       0   0   0  12
   MAX     3.00000       4   7  10  13
 
SGMGA_VCN_PRB:
  Normal end of execution.
 
16 October 2011  10:54:39.037 AM
