25 June 2010   9:45:47.717 AM
 
ZIGGURAT_OPEN_MP:
  FORTRAN90 version
 
  The number of processors available is:        8
  The number of threads available is:           1
 
TEST01
  SHR3 computes random integers.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is        1
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential      Parallel    Difference
 
         0   -1863796367   -1863796367             0
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.651162E-01    0.515258E-01
      RATE:   153.572         194.077    
 
TEST02
  R4_UNI computes uniformly random single precision real values.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is        1
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.660511E-01    0.660511E-01     0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.462968E-01    0.463040E-01
      RATE:   215.997         215.964    
 
TEST03
  R4_NOR computes normal random single precision real values.
  Since the output is completely determined
  by the input value of SEED and the tables, we can run in
  parallel as long as we make an array of seeds and share the tables.

  The number of threads is        1
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0   -0.326194       -0.326194         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.856330E-01    0.831461E-01
      RATE:   116.777         120.270    
 
TEST04
  R4_EXP computes exponential random single precision real values.
  Since the output is completely determined
  by the input value of SEED and the tables, we can run in
  parallel as long as we make an array of seeds and share the tables.

  The number of threads is        1
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.351739        0.351739         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.610590E-01    0.611420E-01
      RATE:   163.776         163.554    
 
ZIGGURAT_OPEN_MP:
  Normal end of execution.
 
25 June 2010   9:45:48.220 AM
25 June 2010   9:45:48.335 AM
 
ZIGGURAT_OPEN_MP:
  FORTRAN90 version
 
  The number of processors available is:        8
  The number of threads available is:           2
 
TEST01
  SHR3 computes random integers.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is        2
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential      Parallel    Difference
 
         0    1249912034    1249912034             0
         1     503020437     503020437             0
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.525320E-01    0.322182E-01
      RATE:   190.360         310.383    
 
TEST02
  R4_UNI computes uniformly random single precision real values.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is        2
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.791018        0.791018         0.00000    
         1    0.617119        0.617119         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.462620E-01    0.366380E-01
      RATE:   216.160         272.941    
 
TEST03
  R4_NOR computes normal random single precision real values.
  Since the output is completely determined
  by the input value of SEED and the tables, we can run in
  parallel as long as we make an array of seeds and share the tables.

  The number of threads is        2
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.977730        0.977730         0.00000    
         1    -1.07051        -1.07051         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.856600E-01    0.417950E-01
      RATE:   116.741         239.263    
 
TEST04
  R4_EXP computes exponential random single precision real values.
  Since the output is completely determined
  by the input value of SEED and the tables, we can run in
  parallel as long as we make an array of seeds and share the tables.

  The number of threads is        2
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0     1.73583         1.73583         0.00000    
         1    0.502068        0.502068         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.607510E-01    0.306201E-01
      RATE:   164.606         326.583    
 
ZIGGURAT_OPEN_MP:
  Normal end of execution.
 
25 June 2010   9:45:48.731 AM
25 June 2010   9:45:48.753 AM
 
ZIGGURAT_OPEN_MP:
  FORTRAN90 version
 
  The number of processors available is:        8
  The number of threads available is:           4
 
TEST01
  SHR3 computes random integers.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is        4
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential      Parallel    Difference
 
         0   -1669655539   -1669655539             0
         1     108105747     108105747             0
         2   -1587791136   -1587791136             0
         3    1909075432    1909075432             0
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.433421E-01    0.107620E-01
      RATE:   230.722         929.197    
 
TEST02
  R4_UNI computes uniformly random single precision real values.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is        4
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.111253        0.111253         0.00000    
         1    0.525170        0.525170         0.00000    
         2    0.130314        0.130314         0.00000    
         3    0.944491        0.944491         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.474479E-01    0.121241E-01
      RATE:   210.757         824.806    
 
TEST03
  R4_NOR computes normal random single precision real values.
  Since the output is completely determined
  by the input value of SEED and the tables, we can run in
  parallel as long as we make an array of seeds and share the tables.

  The number of threads is        4
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0   -0.828252       -0.828252         0.00000    
         1    0.314686        0.314686         0.00000    
         2   -0.989801       -0.989801         0.00000    
         3    -1.48772        -1.48772         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.859339E-01    0.217769E-01
      RATE:   116.368         459.202    
 
TEST04
  R4_EXP computes exponential random single precision real values.
  Since the output is completely determined
  by the input value of SEED and the tables, we can run in
  parallel as long as we make an array of seeds and share the tables.

  The number of threads is        4
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.129717        0.129717         0.00000    
         1    0.439901        0.439901         0.00000    
         2    0.834098        0.834098         0.00000    
         3    0.973891        0.973891         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.609550E-01    0.168922E-01
      RATE:   164.055         591.989    
 
ZIGGURAT_OPEN_MP:
  Normal end of execution.
 
25 June 2010   9:45:49.056 AM
25 June 2010   9:45:49.179 AM
 
ZIGGURAT_OPEN_MP:
  FORTRAN90 version
 
  The number of processors available is:        8
  The number of threads available is:           8
 
TEST01
  SHR3 computes random integers.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is        8
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential      Parallel    Difference
 
         0    2066176573    2066176573             0
         1   -1303848666   -1303848666             0
         2     167050157     167050157             0
         3     412856606     412856606             0
         4    -541773661    -541773661             0
         5    -189888513    -189888513             0
         6    -435391081    -435391081             0
         7    1328385438    1328385438             0
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.431881E-01    0.539589E-02
      RATE:   231.545         1853.26    
 
TEST02
  R4_UNI computes uniformly random single precision real values.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is        8
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.981069        0.981069         0.00000    
         1    0.196424        0.196424         0.00000    
         2    0.538894        0.538894         0.00000    
         3    0.596126        0.596126         0.00000    
         4    0.373859        0.373859         0.00000    
         5    0.455788        0.455788         0.00000    
         6    0.398628        0.398628         0.00000    
         7    0.809289        0.809289         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.482099E-01    0.644302E-02
      RATE:   207.426         1552.07    
 
TEST03
  R4_NOR computes normal random single precision real values.
  Since the output is completely determined
  by the input value of SEED and the tables, we can run in
  parallel as long as we make an array of seeds and share the tables.

  The number of threads is        8
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    -1.33701        -1.33701         0.00000    
         1     1.76707         1.76707         0.00000    
         2    0.673030        0.673030         0.00000    
         3   -0.489069E-01   -0.489069E-01     0.00000    
         4   -0.393083       -0.393083         0.00000    
         5   -0.447175       -0.447175         0.00000    
         6   -0.819305E-01   -0.819305E-01     0.00000    
         7   -0.861219       -0.861219         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.903912E-01    0.119431E-01
      RATE:   110.630         837.303    
 
TEST04
  R4_EXP computes exponential random single precision real values.
  Since the output is completely determined
  by the input value of SEED and the tables, we can run in
  parallel as long as we make an array of seeds and share the tables.

  The number of threads is        8
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.445202        0.445202         0.00000    
         1    0.451912        0.451912         0.00000    
         2    0.355638        0.355638         0.00000    
         3    0.743365        0.743365         0.00000    
         4     1.85271         1.85271         0.00000    
         5    0.674086        0.674086         0.00000    
         6    0.810988        0.810988         0.00000    
         7    0.686205        0.686205         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.641322E-01    0.204618E-01
      RATE:   155.928         488.716    
 
ZIGGURAT_OPEN_MP:
  Normal end of execution.
 
25 June 2010   9:45:49.590 AM
